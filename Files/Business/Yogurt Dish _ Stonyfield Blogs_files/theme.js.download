/*!
 * Masonry PACKAGED v4.2.1
 * Cascading grid layout library
 * https://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */

/**
 * Bridget makes jQuery widgets
 * v2.0.1
 * MIT license
 */

/* jshint browser: true, strict: true, undef: true, unused: true */

( function( window, factory ) {
  // universal module definition
  /*jshint strict: false */ /* globals define, module, require */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( 'jquery-bridget/jquery-bridget',[ 'jquery' ], function( jQuery ) {
      return factory( window, jQuery );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('jquery')
    );
  } else {
    // browser global
    window.jQueryBridget = factory(
      window,
      window.jQuery
    );
  }

}( window, function factory( window, jQuery ) {
'use strict';

// ----- utils ----- //

var arraySlice = Array.prototype.slice;

// helper function for logging errors
// $.error breaks jQuery chaining
var console = window.console;
var logError = typeof console == 'undefined' ? function() {} :
  function( message ) {
    console.error( message );
  };

// ----- jQueryBridget ----- //

function jQueryBridget( namespace, PluginClass, $ ) {
  $ = $ || jQuery || window.jQuery;
  if ( !$ ) {
    return;
  }

  // add option method -> $().plugin('option', {...})
  if ( !PluginClass.prototype.option ) {
    // option setter
    PluginClass.prototype.option = function( opts ) {
      // bail out if not an object
      if ( !$.isPlainObject( opts ) ){
        return;
      }
      this.options = $.extend( true, this.options, opts );
    };
  }

  // make jQuery plugin
  $.fn[ namespace ] = function( arg0 /*, arg1 */ ) {
    if ( typeof arg0 == 'string' ) {
      // method call $().plugin( 'methodName', { options } )
      // shift arguments by 1
      var args = arraySlice.call( arguments, 1 );
      return methodCall( this, arg0, args );
    }
    // just $().plugin({ options })
    plainCall( this, arg0 );
    return this;
  };

  // $().plugin('methodName')
  function methodCall( $elems, methodName, args ) {
    var returnValue;
    var pluginMethodStr = '$().' + namespace + '("' + methodName + '")';

    $elems.each( function( i, elem ) {
      // get instance
      var instance = $.data( elem, namespace );
      if ( !instance ) {
        logError( namespace + ' not initialized. Cannot call methods, i.e. ' +
          pluginMethodStr );
        return;
      }

      var method = instance[ methodName ];
      if ( !method || methodName.charAt(0) == '_' ) {
        logError( pluginMethodStr + ' is not a valid method' );
        return;
      }

      // apply method, get return value
      var value = method.apply( instance, args );
      // set return value if value is returned, use only first value
      returnValue = returnValue === undefined ? value : returnValue;
    });

    return returnValue !== undefined ? returnValue : $elems;
  }

  function plainCall( $elems, options ) {
    $elems.each( function( i, elem ) {
      var instance = $.data( elem, namespace );
      if ( instance ) {
        // set options & init
        instance.option( options );
        instance._init();
      } else {
        // initialize new instance
        instance = new PluginClass( elem, options );
        $.data( elem, namespace, instance );
      }
    });
  }

  updateJQuery( $ );

}

// ----- updateJQuery ----- //

// set $.bridget for v1 backwards compatibility
function updateJQuery( $ ) {
  if ( !$ || ( $ && $.bridget ) ) {
    return;
  }
  $.bridget = jQueryBridget;
}

updateJQuery( jQuery || window.jQuery );

// -----  ----- //

return jQueryBridget;

}));

/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

( function( global, factory ) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, window */
  if ( typeof define == 'function' && define.amd ) {
    // AMD - RequireJS
    define( 'ev-emitter/ev-emitter',factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }

}( typeof window != 'undefined' ? window : this, function() {



function EvEmitter() {}

var proto = EvEmitter.prototype;

proto.on = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // set events hash
  var events = this._events = this._events || {};
  // set listeners array
  var listeners = events[ eventName ] = events[ eventName ] || [];
  // only add once
  if ( listeners.indexOf( listener ) == -1 ) {
    listeners.push( listener );
  }

  return this;
};

proto.once = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // add event
  this.on( eventName, listener );
  // set once flag
  // set onceEvents hash
  var onceEvents = this._onceEvents = this._onceEvents || {};
  // set onceListeners object
  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};
  // set flag
  onceListeners[ listener ] = true;

  return this;
};

proto.off = function( eventName, listener ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  var index = listeners.indexOf( listener );
  if ( index != -1 ) {
    listeners.splice( index, 1 );
  }

  return this;
};

proto.emitEvent = function( eventName, args ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  // copy over to avoid interference if .off() in listener
  listeners = listeners.slice(0);
  args = args || [];
  // once stuff
  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];

  for ( var i=0; i < listeners.length; i++ ) {
    var listener = listeners[i]
    var isOnce = onceListeners && onceListeners[ listener ];
    if ( isOnce ) {
      // remove listener
      // remove before trigger to prevent recursion
      this.off( eventName, listener );
      // unset once flag
      delete onceListeners[ listener ];
    }
    // trigger listener
    listener.apply( this, args );
  }

  return this;
};

proto.allOff = function() {
  delete this._events;
  delete this._onceEvents;
};

return EvEmitter;

}));

/*!
 * getSize v2.0.2
 * measure size of elements
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false, module: false, console: false */

( function( window, factory ) {
  'use strict';

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( 'get-size/get-size',[],function() {
      return factory();
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.getSize = factory();
  }

})( window, function factory() {
'use strict';

// -------------------------- helpers -------------------------- //

// get a number from a string, not a percentage
function getStyleSize( value ) {
  var num = parseFloat( value );
  // not a percent like '100%', and a number
  var isValid = value.indexOf('%') == -1 && !isNaN( num );
  return isValid && num;
}

function noop() {}

var logError = typeof console == 'undefined' ? noop :
  function( message ) {
    console.error( message );
  };

// -------------------------- measurements -------------------------- //

var measurements = [
  'paddingLeft',
  'paddingRight',
  'paddingTop',
  'paddingBottom',
  'marginLeft',
  'marginRight',
  'marginTop',
  'marginBottom',
  'borderLeftWidth',
  'borderRightWidth',
  'borderTopWidth',
  'borderBottomWidth'
];

var measurementsLength = measurements.length;

function getZeroSize() {
  var size = {
    width: 0,
    height: 0,
    innerWidth: 0,
    innerHeight: 0,
    outerWidth: 0,
    outerHeight: 0
  };
  for ( var i=0; i < measurementsLength; i++ ) {
    var measurement = measurements[i];
    size[ measurement ] = 0;
  }
  return size;
}

// -------------------------- getStyle -------------------------- //

/**
 * getStyle, get style of element, check for Firefox bug
 * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */
function getStyle( elem ) {
  var style = getComputedStyle( elem );
  if ( !style ) {
    logError( 'Style returned ' + style +
      '. Are you running this code in a hidden iframe on Firefox? ' +
      'See http://bit.ly/getsizebug1' );
  }
  return style;
}

// -------------------------- setup -------------------------- //

var isSetup = false;

var isBoxSizeOuter;

/**
 * setup
 * check isBoxSizerOuter
 * do on first getSize() rather than on page load for Firefox bug
 */
function setup() {
  // setup once
  if ( isSetup ) {
    return;
  }
  isSetup = true;

  // -------------------------- box sizing -------------------------- //

  /**
   * WebKit measures the outer-width on style.width on border-box elems
   * IE & Firefox<29 measures the inner-width
   */
  var div = document.createElement('div');
  div.style.width = '200px';
  div.style.padding = '1px 2px 3px 4px';
  div.style.borderStyle = 'solid';
  div.style.borderWidth = '1px 2px 3px 4px';
  div.style.boxSizing = 'border-box';

  var body = document.body || document.documentElement;
  body.appendChild( div );
  var style = getStyle( div );

  getSize.isBoxSizeOuter = isBoxSizeOuter = getStyleSize( style.width ) == 200;
  body.removeChild( div );

}

// -------------------------- getSize -------------------------- //

function getSize( elem ) {
  setup();

  // use querySeletor if elem is string
  if ( typeof elem == 'string' ) {
    elem = document.querySelector( elem );
  }

  // do not proceed on non-objects
  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {
    return;
  }

  var style = getStyle( elem );

  // if hidden, everything is 0
  if ( style.display == 'none' ) {
    return getZeroSize();
  }

  var size = {};
  size.width = elem.offsetWidth;
  size.height = elem.offsetHeight;

  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';

  // get all measurements
  for ( var i=0; i < measurementsLength; i++ ) {
    var measurement = measurements[i];
    var value = style[ measurement ];
    var num = parseFloat( value );
    // any 'auto', 'medium' value will be 0
    size[ measurement ] = !isNaN( num ) ? num : 0;
  }

  var paddingWidth = size.paddingLeft + size.paddingRight;
  var paddingHeight = size.paddingTop + size.paddingBottom;
  var marginWidth = size.marginLeft + size.marginRight;
  var marginHeight = size.marginTop + size.marginBottom;
  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
  var borderHeight = size.borderTopWidth + size.borderBottomWidth;

  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

  // overwrite width and height if we can get it from style
  var styleWidth = getStyleSize( style.width );
  if ( styleWidth !== false ) {
    size.width = styleWidth +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
  }

  var styleHeight = getStyleSize( style.height );
  if ( styleHeight !== false ) {
    size.height = styleHeight +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
  }

  size.innerWidth = size.width - ( paddingWidth + borderWidth );
  size.innerHeight = size.height - ( paddingHeight + borderHeight );

  size.outerWidth = size.width + marginWidth;
  size.outerHeight = size.height + marginHeight;

  return size;
}

return getSize;

});

/**
 * matchesSelector v2.0.2
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */

( function( window, factory ) {
  /*global define: false, module: false */
  'use strict';
  // universal module definition
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( 'desandro-matches-selector/matches-selector',factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.matchesSelector = factory();
  }

}( window, function factory() {
  'use strict';

  var matchesMethod = ( function() {
    var ElemProto = window.Element.prototype;
    // check for the standard method name first
    if ( ElemProto.matches ) {
      return 'matches';
    }
    // check un-prefixed
    if ( ElemProto.matchesSelector ) {
      return 'matchesSelector';
    }
    // check vendor prefixes
    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];

    for ( var i=0; i < prefixes.length; i++ ) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';
      if ( ElemProto[ method ] ) {
        return method;
      }
    }
  })();

  return function matchesSelector( elem, selector ) {
    return elem[ matchesMethod ]( selector );
  };

}));

/**
 * Fizzy UI utils v2.0.5
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

( function( window, factory ) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( 'fizzy-ui-utils/utils',[
      'desandro-matches-selector/matches-selector'
    ], function( matchesSelector ) {
      return factory( window, matchesSelector );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('desandro-matches-selector')
    );
  } else {
    // browser global
    window.fizzyUIUtils = factory(
      window,
      window.matchesSelector
    );
  }

}( window, function factory( window, matchesSelector ) {



var utils = {};

// ----- extend ----- //

// extends objects
utils.extend = function( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
};

// ----- modulo ----- //

utils.modulo = function( num, div ) {
  return ( ( num % div ) + div ) % div;
};

// ----- makeArray ----- //

// turn element or nodeList into an array
utils.makeArray = function( obj ) {
  var ary = [];
  if ( Array.isArray( obj ) ) {
    // use object if already an array
    ary = obj;
  } else if ( obj && typeof obj == 'object' &&
    typeof obj.length == 'number' ) {
    // convert nodeList to array
    for ( var i=0; i < obj.length; i++ ) {
      ary.push( obj[i] );
    }
  } else {
    // array of single index
    ary.push( obj );
  }
  return ary;
};

// ----- removeFrom ----- //

utils.removeFrom = function( ary, obj ) {
  var index = ary.indexOf( obj );
  if ( index != -1 ) {
    ary.splice( index, 1 );
  }
};

// ----- getParent ----- //

utils.getParent = function( elem, selector ) {
  while ( elem.parentNode && elem != document.body ) {
    elem = elem.parentNode;
    if ( matchesSelector( elem, selector ) ) {
      return elem;
    }
  }
};

// ----- getQueryElement ----- //

// use element as selector string
utils.getQueryElement = function( elem ) {
  if ( typeof elem == 'string' ) {
    return document.querySelector( elem );
  }
  return elem;
};

// ----- handleEvent ----- //

// enable .ontype to trigger from .addEventListener( elem, 'type' )
utils.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

// ----- filterFindElements ----- //

utils.filterFindElements = function( elems, selector ) {
  // make array of elems
  elems = utils.makeArray( elems );
  var ffElems = [];

  elems.forEach( function( elem ) {
    // check that elem is an actual element
    if ( !( elem instanceof HTMLElement ) ) {
      return;
    }
    // add elem if no selector
    if ( !selector ) {
      ffElems.push( elem );
      return;
    }
    // filter & find items if we have a selector
    // filter
    if ( matchesSelector( elem, selector ) ) {
      ffElems.push( elem );
    }
    // find children
    var childElems = elem.querySelectorAll( selector );
    // concat childElems to filterFound array
    for ( var i=0; i < childElems.length; i++ ) {
      ffElems.push( childElems[i] );
    }
  });

  return ffElems;
};

// ----- debounceMethod ----- //

utils.debounceMethod = function( _class, methodName, threshold ) {
  // original method
  var method = _class.prototype[ methodName ];
  var timeoutName = methodName + 'Timeout';

  _class.prototype[ methodName ] = function() {
    var timeout = this[ timeoutName ];
    if ( timeout ) {
      clearTimeout( timeout );
    }
    var args = arguments;

    var _this = this;
    this[ timeoutName ] = setTimeout( function() {
      method.apply( _this, args );
      delete _this[ timeoutName ];
    }, threshold || 100 );
  };
};

// ----- docReady ----- //

utils.docReady = function( callback ) {
  var readyState = document.readyState;
  if ( readyState == 'complete' || readyState == 'interactive' ) {
    // do async to allow for other scripts to run. metafizzy/flickity#441
    setTimeout( callback );
  } else {
    document.addEventListener( 'DOMContentLoaded', callback );
  }
};

// ----- htmlInit ----- //

// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
utils.toDashed = function( str ) {
  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
    return $1 + '-' + $2;
  }).toLowerCase();
};

var console = window.console;
/**
 * allow user to initialize classes via [data-namespace] or .js-namespace class
 * htmlInit( Widget, 'widgetName' )
 * options are parsed from data-namespace-options
 */
utils.htmlInit = function( WidgetClass, namespace ) {
  utils.docReady( function() {
    var dashedNamespace = utils.toDashed( namespace );
    var dataAttr = 'data-' + dashedNamespace;
    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );
    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );
    var elems = utils.makeArray( dataAttrElems )
      .concat( utils.makeArray( jsDashElems ) );
    var dataOptionsAttr = dataAttr + '-options';
    var jQuery = window.jQuery;

    elems.forEach( function( elem ) {
      var attr = elem.getAttribute( dataAttr ) ||
        elem.getAttribute( dataOptionsAttr );
      var options;
      try {
        options = attr && JSON.parse( attr );
      } catch ( error ) {
        // log error, do not initialize
        if ( console ) {
          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +
          ': ' + error );
        }
        return;
      }
      // initialize
      var instance = new WidgetClass( elem, options );
      // make available via $().data('namespace')
      if ( jQuery ) {
        jQuery.data( elem, namespace, instance );
      }
    });

  });
};

// -----  ----- //

return utils;

}));

/**
 * Outlayer Item
 */

( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, require */
  if ( typeof define == 'function' && define.amd ) {
    // AMD - RequireJS
    define( 'outlayer/item',[
        'ev-emitter/ev-emitter',
        'get-size/get-size'
      ],
      factory
    );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS - Browserify, Webpack
    module.exports = factory(
      require('ev-emitter'),
      require('get-size')
    );
  } else {
    // browser global
    window.Outlayer = {};
    window.Outlayer.Item = factory(
      window.EvEmitter,
      window.getSize
    );
  }

}( window, function factory( EvEmitter, getSize ) {
'use strict';

// ----- helpers ----- //

function isEmptyObj( obj ) {
  for ( var prop in obj ) {
    return false;
  }
  prop = null;
  return true;
}

// -------------------------- CSS3 support -------------------------- //


var docElemStyle = document.documentElement.style;

var transitionProperty = typeof docElemStyle.transition == 'string' ?
  'transition' : 'WebkitTransition';
var transformProperty = typeof docElemStyle.transform == 'string' ?
  'transform' : 'WebkitTransform';

var transitionEndEvent = {
  WebkitTransition: 'webkitTransitionEnd',
  transition: 'transitionend'
}[ transitionProperty ];

// cache all vendor properties that could have vendor prefix
var vendorProperties = {
  transform: transformProperty,
  transition: transitionProperty,
  transitionDuration: transitionProperty + 'Duration',
  transitionProperty: transitionProperty + 'Property',
  transitionDelay: transitionProperty + 'Delay'
};

// -------------------------- Item -------------------------- //

function Item( element, layout ) {
  if ( !element ) {
    return;
  }

  this.element = element;
  // parent layout class, i.e. Masonry, Isotope, or Packery
  this.layout = layout;
  this.position = {
    x: 0,
    y: 0
  };

  this._create();
}

// inherit EvEmitter
var proto = Item.prototype = Object.create( EvEmitter.prototype );
proto.constructor = Item;

proto._create = function() {
  // transition objects
  this._transn = {
    ingProperties: {},
    clean: {},
    onEnd: {}
  };

  this.css({
    position: 'absolute'
  });
};

// trigger specified handler for event type
proto.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

proto.getSize = function() {
  this.size = getSize( this.element );
};

/**
 * apply CSS styles to element
 * @param {Object} style
 */
proto.css = function( style ) {
  var elemStyle = this.element.style;

  for ( var prop in style ) {
    // use vendor property if available
    var supportedProp = vendorProperties[ prop ] || prop;
    elemStyle[ supportedProp ] = style[ prop ];
  }
};

 // measure position, and sets it
proto.getPosition = function() {
  var style = getComputedStyle( this.element );
  var isOriginLeft = this.layout._getOption('originLeft');
  var isOriginTop = this.layout._getOption('originTop');
  var xValue = style[ isOriginLeft ? 'left' : 'right' ];
  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];
  // convert percent to pixels
  var layoutSize = this.layout.size;
  var x = xValue.indexOf('%') != -1 ?
    ( parseFloat( xValue ) / 100 ) * layoutSize.width : parseInt( xValue, 10 );
  var y = yValue.indexOf('%') != -1 ?
    ( parseFloat( yValue ) / 100 ) * layoutSize.height : parseInt( yValue, 10 );

  // clean up 'auto' or other non-integer values
  x = isNaN( x ) ? 0 : x;
  y = isNaN( y ) ? 0 : y;
  // remove padding from measurement
  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;

  this.position.x = x;
  this.position.y = y;
};

// set settled position, apply padding
proto.layoutPosition = function() {
  var layoutSize = this.layout.size;
  var style = {};
  var isOriginLeft = this.layout._getOption('originLeft');
  var isOriginTop = this.layout._getOption('originTop');

  // x
  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';
  var xProperty = isOriginLeft ? 'left' : 'right';
  var xResetProperty = isOriginLeft ? 'right' : 'left';

  var x = this.position.x + layoutSize[ xPadding ];
  // set in percentage or pixels
  style[ xProperty ] = this.getXValue( x );
  // reset other property
  style[ xResetProperty ] = '';

  // y
  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';
  var yProperty = isOriginTop ? 'top' : 'bottom';
  var yResetProperty = isOriginTop ? 'bottom' : 'top';

  var y = this.position.y + layoutSize[ yPadding ];
  // set in percentage or pixels
  style[ yProperty ] = this.getYValue( y );
  // reset other property
  style[ yResetProperty ] = '';

  this.css( style );
  this.emitEvent( 'layout', [ this ] );
};

proto.getXValue = function( x ) {
  var isHorizontal = this.layout._getOption('horizontal');
  return this.layout.options.percentPosition && !isHorizontal ?
    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';
};

proto.getYValue = function( y ) {
  var isHorizontal = this.layout._getOption('horizontal');
  return this.layout.options.percentPosition && isHorizontal ?
    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';
};

proto._transitionTo = function( x, y ) {
  this.getPosition();
  // get current x & y from top/left
  var curX = this.position.x;
  var curY = this.position.y;

  var compareX = parseInt( x, 10 );
  var compareY = parseInt( y, 10 );
  var didNotMove = compareX === this.position.x && compareY === this.position.y;

  // save end position
  this.setPosition( x, y );

  // if did not move and not transitioning, just go to layout
  if ( didNotMove && !this.isTransitioning ) {
    this.layoutPosition();
    return;
  }

  var transX = x - curX;
  var transY = y - curY;
  var transitionStyle = {};
  transitionStyle.transform = this.getTranslate( transX, transY );

  this.transition({
    to: transitionStyle,
    onTransitionEnd: {
      transform: this.layoutPosition
    },
    isCleaning: true
  });
};

proto.getTranslate = function( x, y ) {
  // flip cooridinates if origin on right or bottom
  var isOriginLeft = this.layout._getOption('originLeft');
  var isOriginTop = this.layout._getOption('originTop');
  x = isOriginLeft ? x : -x;
  y = isOriginTop ? y : -y;
  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
};

// non transition + transform support
proto.goTo = function( x, y ) {
  this.setPosition( x, y );
  this.layoutPosition();
};

proto.moveTo = proto._transitionTo;

proto.setPosition = function( x, y ) {
  this.position.x = parseInt( x, 10 );
  this.position.y = parseInt( y, 10 );
};

// ----- transition ----- //

/**
 * @param {Object} style - CSS
 * @param {Function} onTransitionEnd
 */

// non transition, just trigger callback
proto._nonTransition = function( args ) {
  this.css( args.to );
  if ( args.isCleaning ) {
    this._removeStyles( args.to );
  }
  for ( var prop in args.onTransitionEnd ) {
    args.onTransitionEnd[ prop ].call( this );
  }
};

/**
 * proper transition
 * @param {Object} args - arguments
 *   @param {Object} to - style to transition to
 *   @param {Object} from - style to start transition from
 *   @param {Boolean} isCleaning - removes transition styles after transition
 *   @param {Function} onTransitionEnd - callback
 */
proto.transition = function( args ) {
  // redirect to nonTransition if no transition duration
  if ( !parseFloat( this.layout.options.transitionDuration ) ) {
    this._nonTransition( args );
    return;
  }

  var _transition = this._transn;
  // keep track of onTransitionEnd callback by css property
  for ( var prop in args.onTransitionEnd ) {
    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];
  }
  // keep track of properties that are transitioning
  for ( prop in args.to ) {
    _transition.ingProperties[ prop ] = true;
    // keep track of properties to clean up when transition is done
    if ( args.isCleaning ) {
      _transition.clean[ prop ] = true;
    }
  }

  // set from styles
  if ( args.from ) {
    this.css( args.from );
    // force redraw. http://blog.alexmaccaw.com/css-transitions
    var h = this.element.offsetHeight;
    // hack for JSHint to hush about unused var
    h = null;
  }
  // enable transition
  this.enableTransition( args.to );
  // set styles that are transitioning
  this.css( args.to );

  this.isTransitioning = true;

};

// dash before all cap letters, including first for
// WebkitTransform => -webkit-transform
function toDashedAll( str ) {
  return str.replace( /([A-Z])/g, function( $1 ) {
    return '-' + $1.toLowerCase();
  });
}

var transitionProps = 'opacity,' + toDashedAll( transformProperty );

proto.enableTransition = function(/* style */) {
  // HACK changing transitionProperty during a transition
  // will cause transition to jump
  if ( this.isTransitioning ) {
    return;
  }

  // make `transition: foo, bar, baz` from style object
  // HACK un-comment this when enableTransition can work
  // while a transition is happening
  // var transitionValues = [];
  // for ( var prop in style ) {
  //   // dash-ify camelCased properties like WebkitTransition
  //   prop = vendorProperties[ prop ] || prop;
  //   transitionValues.push( toDashedAll( prop ) );
  // }
  // munge number to millisecond, to match stagger
  var duration = this.layout.options.transitionDuration;
  duration = typeof duration == 'number' ? duration + 'ms' : duration;
  // enable transition styles
  this.css({
    transitionProperty: transitionProps,
    transitionDuration: duration,
    transitionDelay: this.staggerDelay || 0
  });
  // listen for transition end event
  this.element.addEventListener( transitionEndEvent, this, false );
};

// ----- events ----- //

proto.onwebkitTransitionEnd = function( event ) {
  this.ontransitionend( event );
};

proto.onotransitionend = function( event ) {
  this.ontransitionend( event );
};

// properties that I munge to make my life easier
var dashedVendorProperties = {
  '-webkit-transform': 'transform'
};

proto.ontransitionend = function( event ) {
  // disregard bubbled events from children
  if ( event.target !== this.element ) {
    return;
  }
  var _transition = this._transn;
  // get property name of transitioned property, convert to prefix-free
  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;

  // remove property that has completed transitioning
  delete _transition.ingProperties[ propertyName ];
  // check if any properties are still transitioning
  if ( isEmptyObj( _transition.ingProperties ) ) {
    // all properties have completed transitioning
    this.disableTransition();
  }
  // clean style
  if ( propertyName in _transition.clean ) {
    // clean up style
    this.element.style[ event.propertyName ] = '';
    delete _transition.clean[ propertyName ];
  }
  // trigger onTransitionEnd callback
  if ( propertyName in _transition.onEnd ) {
    var onTransitionEnd = _transition.onEnd[ propertyName ];
    onTransitionEnd.call( this );
    delete _transition.onEnd[ propertyName ];
  }

  this.emitEvent( 'transitionEnd', [ this ] );
};

proto.disableTransition = function() {
  this.removeTransitionStyles();
  this.element.removeEventListener( transitionEndEvent, this, false );
  this.isTransitioning = false;
};

/**
 * removes style property from element
 * @param {Object} style
**/
proto._removeStyles = function( style ) {
  // clean up transition styles
  var cleanStyle = {};
  for ( var prop in style ) {
    cleanStyle[ prop ] = '';
  }
  this.css( cleanStyle );
};

var cleanTransitionStyle = {
  transitionProperty: '',
  transitionDuration: '',
  transitionDelay: ''
};

proto.removeTransitionStyles = function() {
  // remove transition
  this.css( cleanTransitionStyle );
};

// ----- stagger ----- //

proto.stagger = function( delay ) {
  delay = isNaN( delay ) ? 0 : delay;
  this.staggerDelay = delay + 'ms';
};

// ----- show/hide/remove ----- //

// remove element from DOM
proto.removeElem = function() {
  this.element.parentNode.removeChild( this.element );
  // remove display: none
  this.css({ display: '' });
  this.emitEvent( 'remove', [ this ] );
};

proto.remove = function() {
  // just remove element if no transition support or no transition
  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {
    this.removeElem();
    return;
  }

  // start transition
  this.once( 'transitionEnd', function() {
    this.removeElem();
  });
  this.hide();
};

proto.reveal = function() {
  delete this.isHidden;
  // remove display: none
  this.css({ display: '' });

  var options = this.layout.options;

  var onTransitionEnd = {};
  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');
  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;

  this.transition({
    from: options.hiddenStyle,
    to: options.visibleStyle,
    isCleaning: true,
    onTransitionEnd: onTransitionEnd
  });
};

proto.onRevealTransitionEnd = function() {
  // check if still visible
  // during transition, item may have been hidden
  if ( !this.isHidden ) {
    this.emitEvent('reveal');
  }
};

/**
 * get style property use for hide/reveal transition end
 * @param {String} styleProperty - hiddenStyle/visibleStyle
 * @returns {String}
 */
proto.getHideRevealTransitionEndProperty = function( styleProperty ) {
  var optionStyle = this.layout.options[ styleProperty ];
  // use opacity
  if ( optionStyle.opacity ) {
    return 'opacity';
  }
  // get first property
  for ( var prop in optionStyle ) {
    return prop;
  }
};

proto.hide = function() {
  // set flag
  this.isHidden = true;
  // remove display: none
  this.css({ display: '' });

  var options = this.layout.options;

  var onTransitionEnd = {};
  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');
  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;

  this.transition({
    from: options.visibleStyle,
    to: options.hiddenStyle,
    // keep hidden stuff hidden
    isCleaning: true,
    onTransitionEnd: onTransitionEnd
  });
};

proto.onHideTransitionEnd = function() {
  // check if still hidden
  // during transition, item may have been un-hidden
  if ( this.isHidden ) {
    this.css({ display: 'none' });
    this.emitEvent('hide');
  }
};

proto.destroy = function() {
  this.css({
    position: '',
    left: '',
    right: '',
    top: '',
    bottom: '',
    transition: '',
    transform: ''
  });
};

return Item;

}));

/*!
 * Outlayer v2.1.0
 * the brains and guts of a layout library
 * MIT license
 */

( function( window, factory ) {
  'use strict';
  // universal module definition
  /* jshint strict: false */ /* globals define, module, require */
  if ( typeof define == 'function' && define.amd ) {
    // AMD - RequireJS
    define( 'outlayer/outlayer',[
        'ev-emitter/ev-emitter',
        'get-size/get-size',
        'fizzy-ui-utils/utils',
        './item'
      ],
      function( EvEmitter, getSize, utils, Item ) {
        return factory( window, EvEmitter, getSize, utils, Item);
      }
    );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS - Browserify, Webpack
    module.exports = factory(
      window,
      require('ev-emitter'),
      require('get-size'),
      require('fizzy-ui-utils'),
      require('./item')
    );
  } else {
    // browser global
    window.Outlayer = factory(
      window,
      window.EvEmitter,
      window.getSize,
      window.fizzyUIUtils,
      window.Outlayer.Item
    );
  }

}( window, function factory( window, EvEmitter, getSize, utils, Item ) {
'use strict';

// ----- vars ----- //

var console = window.console;
var jQuery = window.jQuery;
var noop = function() {};

// -------------------------- Outlayer -------------------------- //

// globally unique identifiers
var GUID = 0;
// internal store of all Outlayer intances
var instances = {};


/**
 * @param {Element, String} element
 * @param {Object} options
 * @constructor
 */
function Outlayer( element, options ) {
  var queryElement = utils.getQueryElement( element );
  if ( !queryElement ) {
    if ( console ) {
      console.error( 'Bad element for ' + this.constructor.namespace +
        ': ' + ( queryElement || element ) );
    }
    return;
  }
  this.element = queryElement;
  // add jQuery
  if ( jQuery ) {
    this.$element = jQuery( this.element );
  }

  // options
  this.options = utils.extend( {}, this.constructor.defaults );
  this.option( options );

  // add id for Outlayer.getFromElement
  var id = ++GUID;
  this.element.outlayerGUID = id; // expando
  instances[ id ] = this; // associate via id

  // kick it off
  this._create();

  var isInitLayout = this._getOption('initLayout');
  if ( isInitLayout ) {
    this.layout();
  }
}

// settings are for internal use only
Outlayer.namespace = 'outlayer';
Outlayer.Item = Item;

// default options
Outlayer.defaults = {
  containerStyle: {
    position: 'relative'
  },
  initLayout: true,
  originLeft: true,
  originTop: true,
  resize: true,
  resizeContainer: true,
  // item options
  transitionDuration: '0.4s',
  hiddenStyle: {
    opacity: 0,
    transform: 'scale(0.001)'
  },
  visibleStyle: {
    opacity: 1,
    transform: 'scale(1)'
  }
};

var proto = Outlayer.prototype;
// inherit EvEmitter
utils.extend( proto, EvEmitter.prototype );

/**
 * set options
 * @param {Object} opts
 */
proto.option = function( opts ) {
  utils.extend( this.options, opts );
};

/**
 * get backwards compatible option value, check old name
 */
proto._getOption = function( option ) {
  var oldOption = this.constructor.compatOptions[ option ];
  return oldOption && this.options[ oldOption ] !== undefined ?
    this.options[ oldOption ] : this.options[ option ];
};

Outlayer.compatOptions = {
  // currentName: oldName
  initLayout: 'isInitLayout',
  horizontal: 'isHorizontal',
  layoutInstant: 'isLayoutInstant',
  originLeft: 'isOriginLeft',
  originTop: 'isOriginTop',
  resize: 'isResizeBound',
  resizeContainer: 'isResizingContainer'
};

proto._create = function() {
  // get items from children
  this.reloadItems();
  // elements that affect layout, but are not laid out
  this.stamps = [];
  this.stamp( this.options.stamp );
  // set container style
  utils.extend( this.element.style, this.options.containerStyle );

  // bind resize method
  var canBindResize = this._getOption('resize');
  if ( canBindResize ) {
    this.bindResize();
  }
};

// goes through all children again and gets bricks in proper order
proto.reloadItems = function() {
  // collection of item elements
  this.items = this._itemize( this.element.children );
};


/**
 * turn elements into Outlayer.Items to be used in layout
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - collection of new Outlayer Items
 */
proto._itemize = function( elems ) {

  var itemElems = this._filterFindItemElements( elems );
  var Item = this.constructor.Item;

  // create new Outlayer Items for collection
  var items = [];
  for ( var i=0; i < itemElems.length; i++ ) {
    var elem = itemElems[i];
    var item = new Item( elem, this );
    items.push( item );
  }

  return items;
};

/**
 * get item elements to be used in layout
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - item elements
 */
proto._filterFindItemElements = function( elems ) {
  return utils.filterFindElements( elems, this.options.itemSelector );
};

/**
 * getter method for getting item elements
 * @returns {Array} elems - collection of item elements
 */
proto.getItemElements = function() {
  return this.items.map( function( item ) {
    return item.element;
  });
};

// ----- init & layout ----- //

/**
 * lays out all items
 */
proto.layout = function() {
  this._resetLayout();
  this._manageStamps();

  // don't animate first layout
  var layoutInstant = this._getOption('layoutInstant');
  var isInstant = layoutInstant !== undefined ?
    layoutInstant : !this._isLayoutInited;
  this.layoutItems( this.items, isInstant );

  // flag for initalized
  this._isLayoutInited = true;
};

// _init is alias for layout
proto._init = proto.layout;

/**
 * logic before any new layout
 */
proto._resetLayout = function() {
  this.getSize();
};


proto.getSize = function() {
  this.size = getSize( this.element );
};

/**
 * get measurement from option, for columnWidth, rowHeight, gutter
 * if option is String -> get element from selector string, & get size of element
 * if option is Element -> get size of element
 * else use option as a number
 *
 * @param {String} measurement
 * @param {String} size - width or height
 * @private
 */
proto._getMeasurement = function( measurement, size ) {
  var option = this.options[ measurement ];
  var elem;
  if ( !option ) {
    // default to 0
    this[ measurement ] = 0;
  } else {
    // use option as an element
    if ( typeof option == 'string' ) {
      elem = this.element.querySelector( option );
    } else if ( option instanceof HTMLElement ) {
      elem = option;
    }
    // use size of element, if element
    this[ measurement ] = elem ? getSize( elem )[ size ] : option;
  }
};

/**
 * layout a collection of item elements
 * @api public
 */
proto.layoutItems = function( items, isInstant ) {
  items = this._getItemsForLayout( items );

  this._layoutItems( items, isInstant );

  this._postLayout();
};

/**
 * get the items to be laid out
 * you may want to skip over some items
 * @param {Array} items
 * @returns {Array} items
 */
proto._getItemsForLayout = function( items ) {
  return items.filter( function( item ) {
    return !item.isIgnored;
  });
};

/**
 * layout items
 * @param {Array} items
 * @param {Boolean} isInstant
 */
proto._layoutItems = function( items, isInstant ) {
  this._emitCompleteOnItems( 'layout', items );

  if ( !items || !items.length ) {
    // no items, emit event with empty array
    return;
  }

  var queue = [];

  items.forEach( function( item ) {
    // get x/y object from method
    var position = this._getItemLayoutPosition( item );
    // enqueue
    position.item = item;
    position.isInstant = isInstant || item.isLayoutInstant;
    queue.push( position );
  }, this );

  this._processLayoutQueue( queue );
};

/**
 * get item layout position
 * @param {Outlayer.Item} item
 * @returns {Object} x and y position
 */
proto._getItemLayoutPosition = function( /* item */ ) {
  return {
    x: 0,
    y: 0
  };
};

/**
 * iterate over array and position each item
 * Reason being - separating this logic prevents 'layout invalidation'
 * thx @paul_irish
 * @param {Array} queue
 */
proto._processLayoutQueue = function( queue ) {
  this.updateStagger();
  queue.forEach( function( obj, i ) {
    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );
  }, this );
};

// set stagger from option in milliseconds number
proto.updateStagger = function() {
  var stagger = this.options.stagger;
  if ( stagger === null || stagger === undefined ) {
    this.stagger = 0;
    return;
  }
  this.stagger = getMilliseconds( stagger );
  return this.stagger;
};

/**
 * Sets position of item in DOM
 * @param {Outlayer.Item} item
 * @param {Number} x - horizontal position
 * @param {Number} y - vertical position
 * @param {Boolean} isInstant - disables transitions
 */
proto._positionItem = function( item, x, y, isInstant, i ) {
  if ( isInstant ) {
    // if not transition, just set CSS
    item.goTo( x, y );
  } else {
    item.stagger( i * this.stagger );
    item.moveTo( x, y );
  }
};

/**
 * Any logic you want to do after each layout,
 * i.e. size the container
 */
proto._postLayout = function() {
  this.resizeContainer();
};

proto.resizeContainer = function() {
  var isResizingContainer = this._getOption('resizeContainer');
  if ( !isResizingContainer ) {
    return;
  }
  var size = this._getContainerSize();
  if ( size ) {
    this._setContainerMeasure( size.width, true );
    this._setContainerMeasure( size.height, false );
  }
};

/**
 * Sets width or height of container if returned
 * @returns {Object} size
 *   @param {Number} width
 *   @param {Number} height
 */
proto._getContainerSize = noop;

/**
 * @param {Number} measure - size of width or height
 * @param {Boolean} isWidth
 */
proto._setContainerMeasure = function( measure, isWidth ) {
  if ( measure === undefined ) {
    return;
  }

  var elemSize = this.size;
  // add padding and border width if border box
  if ( elemSize.isBorderBox ) {
    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +
      elemSize.borderLeftWidth + elemSize.borderRightWidth :
      elemSize.paddingBottom + elemSize.paddingTop +
      elemSize.borderTopWidth + elemSize.borderBottomWidth;
  }

  measure = Math.max( measure, 0 );
  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';
};

/**
 * emit eventComplete on a collection of items events
 * @param {String} eventName
 * @param {Array} items - Outlayer.Items
 */
proto._emitCompleteOnItems = function( eventName, items ) {
  var _this = this;
  function onComplete() {
    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );
  }

  var count = items.length;
  if ( !items || !count ) {
    onComplete();
    return;
  }

  var doneCount = 0;
  function tick() {
    doneCount++;
    if ( doneCount == count ) {
      onComplete();
    }
  }

  // bind callback
  items.forEach( function( item ) {
    item.once( eventName, tick );
  });
};

/**
 * emits events via EvEmitter and jQuery events
 * @param {String} type - name of event
 * @param {Event} event - original event
 * @param {Array} args - extra arguments
 */
proto.dispatchEvent = function( type, event, args ) {
  // add original event to arguments
  var emitArgs = event ? [ event ].concat( args ) : args;
  this.emitEvent( type, emitArgs );

  if ( jQuery ) {
    // set this.$element
    this.$element = this.$element || jQuery( this.element );
    if ( event ) {
      // create jQuery event
      var $event = jQuery.Event( event );
      $event.type = type;
      this.$element.trigger( $event, args );
    } else {
      // just trigger with type if no event available
      this.$element.trigger( type, args );
    }
  }
};

// -------------------------- ignore & stamps -------------------------- //


/**
 * keep item in collection, but do not lay it out
 * ignored items do not get skipped in layout
 * @param {Element} elem
 */
proto.ignore = function( elem ) {
  var item = this.getItem( elem );
  if ( item ) {
    item.isIgnored = true;
  }
};

/**
 * return item to layout collection
 * @param {Element} elem
 */
proto.unignore = function( elem ) {
  var item = this.getItem( elem );
  if ( item ) {
    delete item.isIgnored;
  }
};

/**
 * adds elements to stamps
 * @param {NodeList, Array, Element, or String} elems
 */
proto.stamp = function( elems ) {
  elems = this._find( elems );
  if ( !elems ) {
    return;
  }

  this.stamps = this.stamps.concat( elems );
  // ignore
  elems.forEach( this.ignore, this );
};

/**
 * removes elements to stamps
 * @param {NodeList, Array, or Element} elems
 */
proto.unstamp = function( elems ) {
  elems = this._find( elems );
  if ( !elems ){
    return;
  }

  elems.forEach( function( elem ) {
    // filter out removed stamp elements
    utils.removeFrom( this.stamps, elem );
    this.unignore( elem );
  }, this );
};

/**
 * finds child elements
 * @param {NodeList, Array, Element, or String} elems
 * @returns {Array} elems
 */
proto._find = function( elems ) {
  if ( !elems ) {
    return;
  }
  // if string, use argument as selector string
  if ( typeof elems == 'string' ) {
    elems = this.element.querySelectorAll( elems );
  }
  elems = utils.makeArray( elems );
  return elems;
};

proto._manageStamps = function() {
  if ( !this.stamps || !this.stamps.length ) {
    return;
  }

  this._getBoundingRect();

  this.stamps.forEach( this._manageStamp, this );
};

// update boundingLeft / Top
proto._getBoundingRect = function() {
  // get bounding rect for container element
  var boundingRect = this.element.getBoundingClientRect();
  var size = this.size;
  this._boundingRect = {
    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
    top: boundingRect.top + size.paddingTop + size.borderTopWidth,
    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),
    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )
  };
};

/**
 * @param {Element} stamp
**/
proto._manageStamp = noop;

/**
 * get x/y position of element relative to container element
 * @param {Element} elem
 * @returns {Object} offset - has left, top, right, bottom
 */
proto._getElementOffset = function( elem ) {
  var boundingRect = elem.getBoundingClientRect();
  var thisRect = this._boundingRect;
  var size = getSize( elem );
  var offset = {
    left: boundingRect.left - thisRect.left - size.marginLeft,
    top: boundingRect.top - thisRect.top - size.marginTop,
    right: thisRect.right - boundingRect.right - size.marginRight,
    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
  };
  return offset;
};

// -------------------------- resize -------------------------- //

// enable event handlers for listeners
// i.e. resize -> onresize
proto.handleEvent = utils.handleEvent;

/**
 * Bind layout to window resizing
 */
proto.bindResize = function() {
  window.addEventListener( 'resize', this );
  this.isResizeBound = true;
};

/**
 * Unbind layout to window resizing
 */
proto.unbindResize = function() {
  window.removeEventListener( 'resize', this );
  this.isResizeBound = false;
};

proto.onresize = function() {
  this.resize();
};

utils.debounceMethod( Outlayer, 'onresize', 100 );

proto.resize = function() {
  // don't trigger if size did not change
  // or if resize was unbound. See #9
  if ( !this.isResizeBound || !this.needsResizeLayout() ) {
    return;
  }

  this.layout();
};

/**
 * check if layout is needed post layout
 * @returns Boolean
 */
proto.needsResizeLayout = function() {
  var size = getSize( this.element );
  // check that this.size and size are there
  // IE8 triggers resize on body size change, so they might not be
  var hasSizes = this.size && size;
  return hasSizes && size.innerWidth !== this.size.innerWidth;
};

// -------------------------- methods -------------------------- //

/**
 * add items to Outlayer instance
 * @param {Array or NodeList or Element} elems
 * @returns {Array} items - Outlayer.Items
**/
proto.addItems = function( elems ) {
  var items = this._itemize( elems );
  // add items to collection
  if ( items.length ) {
    this.items = this.items.concat( items );
  }
  return items;
};

/**
 * Layout newly-appended item elements
 * @param {Array or NodeList or Element} elems
 */
proto.appended = function( elems ) {
  var items = this.addItems( elems );
  if ( !items.length ) {
    return;
  }
  // layout and reveal just the new items
  this.layoutItems( items, true );
  this.reveal( items );
};

/**
 * Layout prepended elements
 * @param {Array or NodeList or Element} elems
 */
proto.prepended = function( elems ) {
  var items = this._itemize( elems );
  if ( !items.length ) {
    return;
  }
  // add items to beginning of collection
  var previousItems = this.items.slice(0);
  this.items = items.concat( previousItems );
  // start new layout
  this._resetLayout();
  this._manageStamps();
  // layout new stuff without transition
  this.layoutItems( items, true );
  this.reveal( items );
  // layout previous items
  this.layoutItems( previousItems );
};

/**
 * reveal a collection of items
 * @param {Array of Outlayer.Items} items
 */
proto.reveal = function( items ) {
  this._emitCompleteOnItems( 'reveal', items );
  if ( !items || !items.length ) {
    return;
  }
  var stagger = this.updateStagger();
  items.forEach( function( item, i ) {
    item.stagger( i * stagger );
    item.reveal();
  });
};

/**
 * hide a collection of items
 * @param {Array of Outlayer.Items} items
 */
proto.hide = function( items ) {
  this._emitCompleteOnItems( 'hide', items );
  if ( !items || !items.length ) {
    return;
  }
  var stagger = this.updateStagger();
  items.forEach( function( item, i ) {
    item.stagger( i * stagger );
    item.hide();
  });
};

/**
 * reveal item elements
 * @param {Array}, {Element}, {NodeList} items
 */
proto.revealItemElements = function( elems ) {
  var items = this.getItems( elems );
  this.reveal( items );
};

/**
 * hide item elements
 * @param {Array}, {Element}, {NodeList} items
 */
proto.hideItemElements = function( elems ) {
  var items = this.getItems( elems );
  this.hide( items );
};

/**
 * get Outlayer.Item, given an Element
 * @param {Element} elem
 * @param {Function} callback
 * @returns {Outlayer.Item} item
 */
proto.getItem = function( elem ) {
  // loop through items to get the one that matches
  for ( var i=0; i < this.items.length; i++ ) {
    var item = this.items[i];
    if ( item.element == elem ) {
      // return item
      return item;
    }
  }
};

/**
 * get collection of Outlayer.Items, given Elements
 * @param {Array} elems
 * @returns {Array} items - Outlayer.Items
 */
proto.getItems = function( elems ) {
  elems = utils.makeArray( elems );
  var items = [];
  elems.forEach( function( elem ) {
    var item = this.getItem( elem );
    if ( item ) {
      items.push( item );
    }
  }, this );

  return items;
};

/**
 * remove element(s) from instance and DOM
 * @param {Array or NodeList or Element} elems
 */
proto.remove = function( elems ) {
  var removeItems = this.getItems( elems );

  this._emitCompleteOnItems( 'remove', removeItems );

  // bail if no items to remove
  if ( !removeItems || !removeItems.length ) {
    return;
  }

  removeItems.forEach( function( item ) {
    item.remove();
    // remove item from collection
    utils.removeFrom( this.items, item );
  }, this );
};

// ----- destroy ----- //

// remove and disable Outlayer instance
proto.destroy = function() {
  // clean up dynamic styles
  var style = this.element.style;
  style.height = '';
  style.position = '';
  style.width = '';
  // destroy items
  this.items.forEach( function( item ) {
    item.destroy();
  });

  this.unbindResize();

  var id = this.element.outlayerGUID;
  delete instances[ id ]; // remove reference to instance by id
  delete this.element.outlayerGUID;
  // remove data for jQuery
  if ( jQuery ) {
    jQuery.removeData( this.element, this.constructor.namespace );
  }

};

// -------------------------- data -------------------------- //

/**
 * get Outlayer instance from element
 * @param {Element} elem
 * @returns {Outlayer}
 */
Outlayer.data = function( elem ) {
  elem = utils.getQueryElement( elem );
  var id = elem && elem.outlayerGUID;
  return id && instances[ id ];
};


// -------------------------- create Outlayer class -------------------------- //

/**
 * create a layout class
 * @param {String} namespace
 */
Outlayer.create = function( namespace, options ) {
  // sub-class Outlayer
  var Layout = subclass( Outlayer );
  // apply new options and compatOptions
  Layout.defaults = utils.extend( {}, Outlayer.defaults );
  utils.extend( Layout.defaults, options );
  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );

  Layout.namespace = namespace;

  Layout.data = Outlayer.data;

  // sub-class Item
  Layout.Item = subclass( Item );

  // -------------------------- declarative -------------------------- //

  utils.htmlInit( Layout, namespace );

  // -------------------------- jQuery bridge -------------------------- //

  // make into jQuery plugin
  if ( jQuery && jQuery.bridget ) {
    jQuery.bridget( namespace, Layout );
  }

  return Layout;
};

function subclass( Parent ) {
  function SubClass() {
    Parent.apply( this, arguments );
  }

  SubClass.prototype = Object.create( Parent.prototype );
  SubClass.prototype.constructor = SubClass;

  return SubClass;
}

// ----- helpers ----- //

// how many milliseconds are in each unit
var msUnits = {
  ms: 1,
  s: 1000
};

// munge time-like parameter into millisecond number
// '0.4s' -> 40
function getMilliseconds( time ) {
  if ( typeof time == 'number' ) {
    return time;
  }
  var matches = time.match( /(^\d*\.?\d*)(\w*)/ );
  var num = matches && matches[1];
  var unit = matches && matches[2];
  if ( !num.length ) {
    return 0;
  }
  num = parseFloat( num );
  var mult = msUnits[ unit ] || 1;
  return num * mult;
}

// ----- fin ----- //

// back in global
Outlayer.Item = Item;

return Outlayer;

}));

/*!
 * Masonry v4.2.1
 * Cascading grid layout library
 * https://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */

( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */ /*globals define, module, require */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
        'outlayer/outlayer',
        'get-size/get-size'
      ],
      factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      require('outlayer'),
      require('get-size')
    );
  } else {
    // browser global
    window.Masonry = factory(
      window.Outlayer,
      window.getSize
    );
  }

}( window, function factory( Outlayer, getSize ) {



// -------------------------- masonryDefinition -------------------------- //

  // create an Outlayer layout class
  var Masonry = Outlayer.create('masonry');
  // isFitWidth -> fitWidth
  Masonry.compatOptions.fitWidth = 'isFitWidth';

  var proto = Masonry.prototype;

  proto._resetLayout = function() {
    this.getSize();
    this._getMeasurement( 'columnWidth', 'outerWidth' );
    this._getMeasurement( 'gutter', 'outerWidth' );
    this.measureColumns();

    // reset column Y
    this.colYs = [];
    for ( var i=0; i < this.cols; i++ ) {
      this.colYs.push( 0 );
    }

    this.maxY = 0;
    this.horizontalColIndex = 0;
  };

  proto.measureColumns = function() {
    this.getContainerWidth();
    // if columnWidth is 0, default to outerWidth of first item
    if ( !this.columnWidth ) {
      var firstItem = this.items[0];
      var firstItemElem = firstItem && firstItem.element;
      // columnWidth fall back to item of first element
      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||
        // if first elem has no width, default to size of container
        this.containerWidth;
    }

    var columnWidth = this.columnWidth += this.gutter;

    // calculate columns
    var containerWidth = this.containerWidth + this.gutter;
    var cols = containerWidth / columnWidth;
    // fix rounding errors, typically with gutters
    var excess = columnWidth - containerWidth % columnWidth;
    // if overshoot is less than a pixel, round up, otherwise floor it
    var mathMethod = excess && excess < 1 ? 'round' : 'floor';
    cols = Math[ mathMethod ]( cols );
    this.cols = Math.max( cols, 1 );
  };

  proto.getContainerWidth = function() {
    // container is parent if fit width
    var isFitWidth = this._getOption('fitWidth');
    var container = isFitWidth ? this.element.parentNode : this.element;
    // check that this.size and size are there
    // IE8 triggers resize on body size change, so they might not be
    var size = getSize( container );
    this.containerWidth = size && size.innerWidth;
  };

  proto._getItemLayoutPosition = function( item ) {
    item.getSize();
    // how many columns does this brick span
    var remainder = item.size.outerWidth % this.columnWidth;
    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
    // round if off by 1 pixel, otherwise use ceil
    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );
    colSpan = Math.min( colSpan, this.cols );
    // use horizontal or top column position
    var colPosMethod = this.options.horizontalOrder ?
      '_getHorizontalColPosition' : '_getTopColPosition';
    var colPosition = this[ colPosMethod ]( colSpan, item );
    // position the brick
    var position = {
      x: this.columnWidth * colPosition.col,
      y: colPosition.y
    };
    // apply setHeight to necessary columns
    var setHeight = colPosition.y + item.size.outerHeight;
    var setMax = colSpan + colPosition.col;
    for ( var i = colPosition.col; i < setMax; i++ ) {
      this.colYs[i] = setHeight;
    }

    return position;
  };

  proto._getTopColPosition = function( colSpan ) {
    var colGroup = this._getTopColGroup( colSpan );
    // get the minimum Y value from the columns
    var minimumY = Math.min.apply( Math, colGroup );

    return {
      col: colGroup.indexOf( minimumY ),
      y: minimumY,
    };
  };

  /**
   * @param {Number} colSpan - number of columns the element spans
   * @returns {Array} colGroup
   */
  proto._getTopColGroup = function( colSpan ) {
    if ( colSpan < 2 ) {
      // if brick spans only one column, use all the column Ys
      return this.colYs;
    }

    var colGroup = [];
    // how many different places could this brick fit horizontally
    var groupCount = this.cols + 1 - colSpan;
    // for each group potential horizontal position
    for ( var i = 0; i < groupCount; i++ ) {
      colGroup[i] = this._getColGroupY( i, colSpan );
    }
    return colGroup;
  };

  proto._getColGroupY = function( col, colSpan ) {
    if ( colSpan < 2 ) {
      return this.colYs[ col ];
    }
    // make an array of colY values for that one group
    var groupColYs = this.colYs.slice( col, col + colSpan );
    // and get the max value of the array
    return Math.max.apply( Math, groupColYs );
  };

  // get column position based on horizontal index. #873
  proto._getHorizontalColPosition = function( colSpan, item ) {
    var col = this.horizontalColIndex % this.cols;
    var isOver = colSpan > 1 && col + colSpan > this.cols;
    // shift to next row if item can't fit on current row
    col = isOver ? 0 : col;
    // don't let zero-size items take up space
    var hasSize = item.size.outerWidth && item.size.outerHeight;
    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;

    return {
      col: col,
      y: this._getColGroupY( col, colSpan ),
    };
  };

  proto._manageStamp = function( stamp ) {
    var stampSize = getSize( stamp );
    var offset = this._getElementOffset( stamp );
    // get the columns that this stamp affects
    var isOriginLeft = this._getOption('originLeft');
    var firstX = isOriginLeft ? offset.left : offset.right;
    var lastX = firstX + stampSize.outerWidth;
    var firstCol = Math.floor( firstX / this.columnWidth );
    firstCol = Math.max( 0, firstCol );
    var lastCol = Math.floor( lastX / this.columnWidth );
    // lastCol should not go over if multiple of columnWidth #425
    lastCol -= lastX % this.columnWidth ? 0 : 1;
    lastCol = Math.min( this.cols - 1, lastCol );
    // set colYs to bottom of the stamp

    var isOriginTop = this._getOption('originTop');
    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +
      stampSize.outerHeight;
    for ( var i = firstCol; i <= lastCol; i++ ) {
      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );
    }
  };

  proto._getContainerSize = function() {
    this.maxY = Math.max.apply( Math, this.colYs );
    var size = {
      height: this.maxY
    };

    if ( this._getOption('fitWidth') ) {
      size.width = this._getContainerFitWidth();
    }

    return size;
  };

  proto._getContainerFitWidth = function() {
    var unusedCols = 0;
    // count unused columns
    var i = this.cols;
    while ( --i ) {
      if ( this.colYs[i] !== 0 ) {
        break;
      }
      unusedCols++;
    }
    // fit container to columns that have been used
    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;
  };

  proto.needsResizeLayout = function() {
    var previousWidth = this.containerWidth;
    this.getContainerWidth();
    return previousWidth != this.containerWidth;
  };

  return Masonry;

}));


/*
* jquery-match-height 0.7.2 by @liabru
* http://brm.io/jquery-match-height/
* License MIT
*/
!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof module&&module.exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){var e=-1,o=-1,n=function(t){return parseFloat(t)||0},a=function(e){var o=1,a=t(e),i=null,r=[];return a.each(function(){var e=t(this),a=e.offset().top-n(e.css("margin-top")),s=r.length>0?r[r.length-1]:null;null===s?r.push(e):Math.floor(Math.abs(i-a))<=o?r[r.length-1]=s.add(e):r.push(e),i=a}),r},i=function(e){var o={
byRow:!0,property:"height",target:null,remove:!1};return"object"==typeof e?t.extend(o,e):("boolean"==typeof e?o.byRow=e:"remove"===e&&(o.remove=!0),o)},r=t.fn.matchHeight=function(e){var o=i(e);if(o.remove){var n=this;return this.css(o.property,""),t.each(r._groups,function(t,e){e.elements=e.elements.not(n)}),this}return this.length<=1&&!o.target?this:(r._groups.push({elements:this,options:o}),r._apply(this,o),this)};r.version="0.7.2",r._groups=[],r._throttle=80,r._maintainScroll=!1,r._beforeUpdate=null,
r._afterUpdate=null,r._rows=a,r._parse=n,r._parseOptions=i,r._apply=function(e,o){var s=i(o),h=t(e),l=[h],c=t(window).scrollTop(),p=t("html").outerHeight(!0),u=h.parents().filter(":hidden");return u.each(function(){var e=t(this);e.data("style-cache",e.attr("style"))}),u.css("display","block"),s.byRow&&!s.target&&(h.each(function(){var e=t(this),o=e.css("display");"inline-block"!==o&&"flex"!==o&&"inline-flex"!==o&&(o="block"),e.data("style-cache",e.attr("style")),e.css({display:o,"padding-top":"0",
"padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px",overflow:"hidden"})}),l=a(h),h.each(function(){var e=t(this);e.attr("style",e.data("style-cache")||"")})),t.each(l,function(e,o){var a=t(o),i=0;if(s.target)i=s.target.outerHeight(!1);else{if(s.byRow&&a.length<=1)return void a.css(s.property,"");a.each(function(){var e=t(this),o=e.attr("style"),n=e.css("display");"inline-block"!==n&&"flex"!==n&&"inline-flex"!==n&&(n="block");var a={
display:n};a[s.property]="",e.css(a),e.outerHeight(!1)>i&&(i=e.outerHeight(!1)),o?e.attr("style",o):e.css("display","")})}a.each(function(){var e=t(this),o=0;s.target&&e.is(s.target)||("border-box"!==e.css("box-sizing")&&(o+=n(e.css("border-top-width"))+n(e.css("border-bottom-width")),o+=n(e.css("padding-top"))+n(e.css("padding-bottom"))),e.css(s.property,i-o+"px"))})}),u.each(function(){var e=t(this);e.attr("style",e.data("style-cache")||null)}),r._maintainScroll&&t(window).scrollTop(c/p*t("html").outerHeight(!0)),
this},r._applyDataApi=function(){var e={};t("[data-match-height], [data-mh]").each(function(){var o=t(this),n=o.attr("data-mh")||o.attr("data-match-height");n in e?e[n]=e[n].add(o):e[n]=o}),t.each(e,function(){this.matchHeight(!0)})};var s=function(e){r._beforeUpdate&&r._beforeUpdate(e,r._groups),t.each(r._groups,function(){r._apply(this.elements,this.options)}),r._afterUpdate&&r._afterUpdate(e,r._groups)};r._update=function(n,a){if(a&&"resize"===a.type){var i=t(window).width();if(i===e)return;e=i;
}n?o===-1&&(o=setTimeout(function(){s(a),o=-1},r._throttle)):s(a)},t(r._applyDataApi);var h=t.fn.on?"on":"bind";t(window)[h]("load",function(t){r._update(!1,t)}),t(window)[h]("resize orientationchange",function(t){r._update(!0,t)})});
/*!
 * imagesLoaded PACKAGED v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

!function(e,t){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",t):"object"==typeof module&&module.exports?module.exports=t():e.EvEmitter=t()}("undefined"!=typeof window?window:this,function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var i=this._events=this._events||{},n=i[e]=i[e]||[];return n.indexOf(t)==-1&&n.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var i=this._onceEvents=this._onceEvents||{},n=i[e]=i[e]||{};return n[t]=!0,this}},t.off=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){var n=i.indexOf(t);return n!=-1&&i.splice(n,1),this}},t.emitEvent=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){i=i.slice(0),t=t||[];for(var n=this._onceEvents&&this._onceEvents[e],o=0;o<i.length;o++){var r=i[o],s=n&&n[r];s&&(this.off(e,r),delete n[r]),r.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e}),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["ev-emitter/ev-emitter"],function(i){return t(e,i)}):"object"==typeof module&&module.exports?module.exports=t(e,require("ev-emitter")):e.imagesLoaded=t(e,e.EvEmitter)}("undefined"!=typeof window?window:this,function(e,t){function i(e,t){for(var i in t)e[i]=t[i];return e}function n(e){if(Array.isArray(e))return e;var t="object"==typeof e&&"number"==typeof e.length;return t?d.call(e):[e]}function o(e,t,r){if(!(this instanceof o))return new o(e,t,r);var s=e;return"string"==typeof e&&(s=document.querySelectorAll(e)),s?(this.elements=n(s),this.options=i({},this.options),"function"==typeof t?r=t:i(this.options,t),r&&this.on("always",r),this.getImages(),h&&(this.jqDeferred=new h.Deferred),void setTimeout(this.check.bind(this))):void a.error("Bad element for imagesLoaded "+(s||e))}function r(e){this.img=e}function s(e,t){this.url=e,this.element=t,this.img=new Image}var h=e.jQuery,a=e.console,d=Array.prototype.slice;o.prototype=Object.create(t.prototype),o.prototype.options={},o.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},o.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),this.options.background===!0&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&u[t]){for(var i=e.querySelectorAll("img"),n=0;n<i.length;n++){var o=i[n];this.addImage(o)}if("string"==typeof this.options.background){var r=e.querySelectorAll(this.options.background);for(n=0;n<r.length;n++){var s=r[n];this.addElementBackgroundImages(s)}}}};var u={1:!0,9:!0,11:!0};return o.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var i=/url\((['"])?(.*?)\1\)/gi,n=i.exec(t.backgroundImage);null!==n;){var o=n&&n[2];o&&this.addBackground(o,e),n=i.exec(t.backgroundImage)}},o.prototype.addImage=function(e){var t=new r(e);this.images.push(t)},o.prototype.addBackground=function(e,t){var i=new s(e,t);this.images.push(i)},o.prototype.check=function(){function e(e,i,n){setTimeout(function(){t.progress(e,i,n)})}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(t){t.once("progress",e),t.check()}):void this.complete()},o.prototype.progress=function(e,t,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&a&&a.log("progress: "+i,e,t)},o.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},r.prototype=Object.create(t.prototype),r.prototype.check=function(){var e=this.getIsImageComplete();return e?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},r.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},r.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},r.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},r.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},r.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},r.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype=Object.create(r.prototype),s.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var e=this.getIsImageComplete();e&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},s.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},o.makeJQueryPlugin=function(t){t=t||e.jQuery,t&&(h=t,h.fn.imagesLoaded=function(e,t){var i=new o(this,e,t);return i.jqDeferred.promise(h(this))})},o.makeJQueryPlugin(),o});
/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/*!
 * perfect-scrollbar v1.3.0
 * (c) 2017 Hyunje Jun
 * @license MIT
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.PerfectScrollbar=e()}(this,function(){"use strict";function t(t){return getComputedStyle(t)}function e(t,e){for(var i in e){var r=e[i];"number"==typeof r&&(r+="px"),t.style[i]=r}return t}function i(t){var e=document.createElement("div");return e.className=t,e}function r(t,e){if(!v)throw new Error("No element matching method supported");return v.call(t,e)}function l(t){t.remove?t.remove():t.parentNode&&t.parentNode.removeChild(t)}function n(t,e){return Array.prototype.filter.call(t.children,function(t){return r(t,e)})}function o(t,e){var i=t.element.classList,r=m.state.scrolling(e);i.contains(r)?clearTimeout(Y[e]):i.add(r)}function s(t,e){Y[e]=setTimeout(function(){return t.isAlive&&t.element.classList.remove(m.state.scrolling(e))},t.settings.scrollingThreshold)}function a(t,e){o(t,e),s(t,e)}function c(t){if("function"==typeof window.CustomEvent)return new CustomEvent(t);var e=document.createEvent("CustomEvent");return e.initCustomEvent(t,!1,!1,void 0),e}function h(t,e,i,r,l){var n=i[0],o=i[1],s=i[2],h=i[3],u=i[4],d=i[5];void 0===r&&(r=!0),void 0===l&&(l=!1);var f=t.element;t.reach[h]=null,f[s]<1&&(t.reach[h]="start"),f[s]>t[n]-t[o]-1&&(t.reach[h]="end"),e&&(f.dispatchEvent(c("ps-scroll-"+h)),e<0?f.dispatchEvent(c("ps-scroll-"+u)):e>0&&f.dispatchEvent(c("ps-scroll-"+d)),r&&a(t,h)),t.reach[h]&&(e||l)&&f.dispatchEvent(c("ps-"+h+"-reach-"+t.reach[h]))}function u(t){return parseInt(t,10)||0}function d(t){return r(t,"input,[contenteditable]")||r(t,"select,[contenteditable]")||r(t,"textarea,[contenteditable]")||r(t,"button,[contenteditable]")}function f(e){var i=t(e);return u(i.width)+u(i.paddingLeft)+u(i.paddingRight)+u(i.borderLeftWidth)+u(i.borderRightWidth)}function p(t,e){return t.settings.minScrollbarLength&&(e=Math.max(e,t.settings.minScrollbarLength)),t.settings.maxScrollbarLength&&(e=Math.min(e,t.settings.maxScrollbarLength)),e}function b(t,i){var r={width:i.railXWidth};i.isRtl?r.left=i.negativeScrollAdjustment+t.scrollLeft+i.containerWidth-i.contentWidth:r.left=t.scrollLeft,i.isScrollbarXUsingBottom?r.bottom=i.scrollbarXBottom-t.scrollTop:r.top=i.scrollbarXTop+t.scrollTop,e(i.scrollbarXRail,r);var l={top:t.scrollTop,height:i.railYHeight};i.isScrollbarYUsingRight?i.isRtl?l.right=i.contentWidth-(i.negativeScrollAdjustment+t.scrollLeft)-i.scrollbarYRight-i.scrollbarYOuterWidth:l.right=i.scrollbarYRight-t.scrollLeft:i.isRtl?l.left=i.negativeScrollAdjustment+t.scrollLeft+2*i.containerWidth-i.contentWidth-i.scrollbarYLeft-i.scrollbarYOuterWidth:l.left=i.scrollbarYLeft+t.scrollLeft,e(i.scrollbarYRail,l),e(i.scrollbarX,{left:i.scrollbarXLeft,width:i.scrollbarXWidth-i.railBorderXWidth}),e(i.scrollbarY,{top:i.scrollbarYTop,height:i.scrollbarYHeight-i.railBorderYWidth})}function g(t,e){function i(e){p[d]=b+v*(e[a]-g),o(t,f),T(t),e.stopPropagation(),e.preventDefault()}function r(){s(t,f),t.event.unbind(t.ownerDocument,"mousemove",i)}var l=e[0],n=e[1],a=e[2],c=e[3],h=e[4],u=e[5],d=e[6],f=e[7],p=t.element,b=null,g=null,v=null;t.event.bind(t[h],"mousedown",function(e){b=p[d],g=e[a],v=(t[n]-t[l])/(t[c]-t[u]),t.event.bind(t.ownerDocument,"mousemove",i),t.event.once(t.ownerDocument,"mouseup",r),e.stopPropagation(),e.preventDefault()})}var v="undefined"!=typeof Element&&(Element.prototype.matches||Element.prototype.webkitMatchesSelector||Element.prototype.msMatchesSelector),m={main:"ps",element:{thumb:function(t){return"ps__thumb-"+t},rail:function(t){return"ps__rail-"+t},consuming:"ps__child--consume"},state:{focus:"ps--focus",active:function(t){return"ps--active-"+t},scrolling:function(t){return"ps--scrolling-"+t}}},Y={x:null,y:null},X=function(t){this.element=t,this.handlers={}},w={isEmpty:{configurable:!0}};X.prototype.bind=function(t,e){void 0===this.handlers[t]&&(this.handlers[t]=[]),this.handlers[t].push(e),this.element.addEventListener(t,e,!1)},X.prototype.unbind=function(t,e){var i=this;this.handlers[t]=this.handlers[t].filter(function(r){return!(!e||r===e)||(i.element.removeEventListener(t,r,!1),!1)})},X.prototype.unbindAll=function(){var t=this;for(var e in t.handlers)t.unbind(e)},w.isEmpty.get=function(){var t=this;return Object.keys(this.handlers).every(function(e){return 0===t.handlers[e].length})},Object.defineProperties(X.prototype,w);var y=function(){this.eventElements=[]};y.prototype.eventElement=function(t){var e=this.eventElements.filter(function(e){return e.element===t})[0];return e||(e=new X(t),this.eventElements.push(e)),e},y.prototype.bind=function(t,e,i){this.eventElement(t).bind(e,i)},y.prototype.unbind=function(t,e,i){var r=this.eventElement(t);r.unbind(e,i),r.isEmpty&&this.eventElements.splice(this.eventElements.indexOf(r),1)},y.prototype.unbindAll=function(){this.eventElements.forEach(function(t){return t.unbindAll()}),this.eventElements=[]},y.prototype.once=function(t,e,i){var r=this.eventElement(t),l=function(t){r.unbind(e,l),i(t)};r.bind(e,l)};var W=function(t,e,i,r,l){void 0===r&&(r=!0),void 0===l&&(l=!1);var n;if("top"===e)n=["contentHeight","containerHeight","scrollTop","y","up","down"];else{if("left"!==e)throw new Error("A proper axis should be provided");n=["contentWidth","containerWidth","scrollLeft","x","left","right"]}h(t,i,n,r,l)},L={isWebKit:"undefined"!=typeof document&&"WebkitAppearance"in document.documentElement.style,supportsTouch:"undefined"!=typeof window&&("ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch),supportsIePointer:"undefined"!=typeof navigator&&navigator.msMaxTouchPoints,isChrome:"undefined"!=typeof navigator&&/Chrome/i.test(navigator&&navigator.userAgent)},T=function(t){var e=t.element;t.containerWidth=e.clientWidth,t.containerHeight=e.clientHeight,t.contentWidth=e.scrollWidth,t.contentHeight=e.scrollHeight,e.contains(t.scrollbarXRail)||(n(e,m.element.rail("x")).forEach(function(t){return l(t)}),e.appendChild(t.scrollbarXRail)),e.contains(t.scrollbarYRail)||(n(e,m.element.rail("y")).forEach(function(t){return l(t)}),e.appendChild(t.scrollbarYRail)),!t.settings.suppressScrollX&&t.containerWidth+t.settings.scrollXMarginOffset<t.contentWidth?(t.scrollbarXActive=!0,t.railXWidth=t.containerWidth-t.railXMarginWidth,t.railXRatio=t.containerWidth/t.railXWidth,t.scrollbarXWidth=p(t,u(t.railXWidth*t.containerWidth/t.contentWidth)),t.scrollbarXLeft=u((t.negativeScrollAdjustment+e.scrollLeft)*(t.railXWidth-t.scrollbarXWidth)/(t.contentWidth-t.containerWidth))):t.scrollbarXActive=!1,!t.settings.suppressScrollY&&t.containerHeight+t.settings.scrollYMarginOffset<t.contentHeight?(t.scrollbarYActive=!0,t.railYHeight=t.containerHeight-t.railYMarginHeight,t.railYRatio=t.containerHeight/t.railYHeight,t.scrollbarYHeight=p(t,u(t.railYHeight*t.containerHeight/t.contentHeight)),t.scrollbarYTop=u(e.scrollTop*(t.railYHeight-t.scrollbarYHeight)/(t.contentHeight-t.containerHeight))):t.scrollbarYActive=!1,t.scrollbarXLeft>=t.railXWidth-t.scrollbarXWidth&&(t.scrollbarXLeft=t.railXWidth-t.scrollbarXWidth),t.scrollbarYTop>=t.railYHeight-t.scrollbarYHeight&&(t.scrollbarYTop=t.railYHeight-t.scrollbarYHeight),b(e,t),t.scrollbarXActive?e.classList.add(m.state.active("x")):(e.classList.remove(m.state.active("x")),t.scrollbarXWidth=0,t.scrollbarXLeft=0,e.scrollLeft=0),t.scrollbarYActive?e.classList.add(m.state.active("y")):(e.classList.remove(m.state.active("y")),t.scrollbarYHeight=0,t.scrollbarYTop=0,e.scrollTop=0)},R={"click-rail":function(t){t.event.bind(t.scrollbarY,"mousedown",function(t){return t.stopPropagation()}),t.event.bind(t.scrollbarYRail,"mousedown",function(e){var i=e.pageY-window.pageYOffset-t.scrollbarYRail.getBoundingClientRect().top>t.scrollbarYTop?1:-1;t.element.scrollTop+=i*t.containerHeight,T(t),e.stopPropagation()}),t.event.bind(t.scrollbarX,"mousedown",function(t){return t.stopPropagation()}),t.event.bind(t.scrollbarXRail,"mousedown",function(e){var i=e.pageX-window.pageXOffset-t.scrollbarXRail.getBoundingClientRect().left>t.scrollbarXLeft?1:-1;t.element.scrollLeft+=i*t.containerWidth,T(t),e.stopPropagation()})},"drag-thumb":function(t){g(t,["containerWidth","contentWidth","pageX","railXWidth","scrollbarX","scrollbarXWidth","scrollLeft","x"]),g(t,["containerHeight","contentHeight","pageY","railYHeight","scrollbarY","scrollbarYHeight","scrollTop","y"])},keyboard:function(t){function e(e,r){var l=i.scrollTop;if(0===e){if(!t.scrollbarYActive)return!1;if(0===l&&r>0||l>=t.contentHeight-t.containerHeight&&r<0)return!t.settings.wheelPropagation}var n=i.scrollLeft;if(0===r){if(!t.scrollbarXActive)return!1;if(0===n&&e<0||n>=t.contentWidth-t.containerWidth&&e>0)return!t.settings.wheelPropagation}return!0}var i=t.element,l=function(){return r(i,":hover")},n=function(){return r(t.scrollbarX,":focus")||r(t.scrollbarY,":focus")};t.event.bind(t.ownerDocument,"keydown",function(r){if(!(r.isDefaultPrevented&&r.isDefaultPrevented()||r.defaultPrevented)&&(l()||n())){var o=document.activeElement?document.activeElement:t.ownerDocument.activeElement;if(o){if("IFRAME"===o.tagName)o=o.contentDocument.activeElement;else for(;o.shadowRoot;)o=o.shadowRoot.activeElement;if(d(o))return}var s=0,a=0;switch(r.which){case 37:s=r.metaKey?-t.contentWidth:r.altKey?-t.containerWidth:-30;break;case 38:a=r.metaKey?t.contentHeight:r.altKey?t.containerHeight:30;break;case 39:s=r.metaKey?t.contentWidth:r.altKey?t.containerWidth:30;break;case 40:a=r.metaKey?-t.contentHeight:r.altKey?-t.containerHeight:-30;break;case 32:a=r.shiftKey?t.containerHeight:-t.containerHeight;break;case 33:a=t.containerHeight;break;case 34:a=-t.containerHeight;break;case 36:a=t.contentHeight;break;case 35:a=-t.contentHeight;break;default:return}t.settings.suppressScrollX&&0!==s||t.settings.suppressScrollY&&0!==a||(i.scrollTop-=a,i.scrollLeft+=s,T(t),e(s,a)&&r.preventDefault())}})},wheel:function(e){function i(t,i){var r=0===o.scrollTop,l=o.scrollTop+o.offsetHeight===o.scrollHeight,n=0===o.scrollLeft,s=o.scrollLeft+o.offsetWidth===o.offsetWidth;return!(Math.abs(i)>Math.abs(t)?r||l:n||s)||!e.settings.wheelPropagation}function r(t){var e=t.deltaX,i=-1*t.deltaY;return void 0!==e&&void 0!==i||(e=-1*t.wheelDeltaX/6,i=t.wheelDeltaY/6),t.deltaMode&&1===t.deltaMode&&(e*=10,i*=10),e!==e&&i!==i&&(e=0,i=t.wheelDelta),t.shiftKey?[-i,-e]:[e,i]}function l(e,i,r){if(!L.isWebKit&&o.querySelector("select:focus"))return!0;if(!o.contains(e))return!1;for(var l=e;l&&l!==o;){if(l.classList.contains(m.element.consuming))return!0;var n=t(l);if([n.overflow,n.overflowX,n.overflowY].join("").match(/(scroll|auto)/)){var s=l.scrollHeight-l.clientHeight;if(s>0&&!(0===l.scrollTop&&r>0||l.scrollTop===s&&r<0))return!0;var a=l.scrollLeft-l.clientWidth;if(a>0&&!(0===l.scrollLeft&&i<0||l.scrollLeft===a&&i>0))return!0}l=l.parentNode}return!1}function n(t){var n=r(t),s=n[0],a=n[1];if(!l(t.target,s,a)){var c=!1;e.settings.useBothWheelAxes?e.scrollbarYActive&&!e.scrollbarXActive?(a?o.scrollTop-=a*e.settings.wheelSpeed:o.scrollTop+=s*e.settings.wheelSpeed,c=!0):e.scrollbarXActive&&!e.scrollbarYActive&&(s?o.scrollLeft+=s*e.settings.wheelSpeed:o.scrollLeft-=a*e.settings.wheelSpeed,c=!0):(o.scrollTop-=a*e.settings.wheelSpeed,o.scrollLeft+=s*e.settings.wheelSpeed),T(e),(c=c||i(s,a))&&!t.ctrlKey&&(t.stopPropagation(),t.preventDefault())}}var o=e.element;void 0!==window.onwheel?e.event.bind(o,"wheel",n):void 0!==window.onmousewheel&&e.event.bind(o,"mousewheel",n)},touch:function(e){function i(t,i){var r=h.scrollTop,l=h.scrollLeft,n=Math.abs(t),o=Math.abs(i);if(o>n){if(i<0&&r===e.contentHeight-e.containerHeight||i>0&&0===r)return 0===window.scrollY&&i>0&&L.isChrome}else if(n>o&&(t<0&&l===e.contentWidth-e.containerWidth||t>0&&0===l))return!0;return!0}function r(t,i){h.scrollTop-=i,h.scrollLeft-=t,T(e)}function l(t){return t.targetTouches?t.targetTouches[0]:t}function n(t){return!(t.pointerType&&"pen"===t.pointerType&&0===t.buttons||(!t.targetTouches||1!==t.targetTouches.length)&&(!t.pointerType||"mouse"===t.pointerType||t.pointerType===t.MSPOINTER_TYPE_MOUSE))}function o(t){if(n(t)){var e=l(t);u.pageX=e.pageX,u.pageY=e.pageY,d=(new Date).getTime(),null!==p&&clearInterval(p)}}function s(e,i,r){if(!h.contains(e))return!1;for(var l=e;l&&l!==h;){if(l.classList.contains(m.element.consuming))return!0;var n=t(l);if([n.overflow,n.overflowX,n.overflowY].join("").match(/(scroll|auto)/)){var o=l.scrollHeight-l.clientHeight;if(o>0&&!(0===l.scrollTop&&r>0||l.scrollTop===o&&r<0))return!0;var s=l.scrollLeft-l.clientWidth;if(s>0&&!(0===l.scrollLeft&&i<0||l.scrollLeft===s&&i>0))return!0}l=l.parentNode}return!1}function a(t){if(n(t)){var e=l(t),o={pageX:e.pageX,pageY:e.pageY},a=o.pageX-u.pageX,c=o.pageY-u.pageY;if(s(t.target,a,c))return;r(a,c),u=o;var h=(new Date).getTime(),p=h-d;p>0&&(f.x=a/p,f.y=c/p,d=h),i(a,c)&&t.preventDefault()}}function c(){e.settings.swipeEasing&&(clearInterval(p),p=setInterval(function(){e.isInitialized?clearInterval(p):f.x||f.y?Math.abs(f.x)<.01&&Math.abs(f.y)<.01?clearInterval(p):(r(30*f.x,30*f.y),f.x*=.8,f.y*=.8):clearInterval(p)},10))}if(L.supportsTouch||L.supportsIePointer){var h=e.element,u={},d=0,f={},p=null;L.supportsTouch?(e.event.bind(h,"touchstart",o),e.event.bind(h,"touchmove",a),e.event.bind(h,"touchend",c)):L.supportsIePointer&&(window.PointerEvent?(e.event.bind(h,"pointerdown",o),e.event.bind(h,"pointermove",a),e.event.bind(h,"pointerup",c)):window.MSPointerEvent&&(e.event.bind(h,"MSPointerDown",o),e.event.bind(h,"MSPointerMove",a),e.event.bind(h,"MSPointerUp",c)))}}},H=function(r,l){var n=this;if(void 0===l&&(l={}),"string"==typeof r&&(r=document.querySelector(r)),!r||!r.nodeName)throw new Error("no element is specified to initialize PerfectScrollbar");this.element=r,r.classList.add(m.main),this.settings={handlers:["click-rail","drag-thumb","keyboard","wheel","touch"],maxScrollbarLength:null,minScrollbarLength:null,scrollingThreshold:1e3,scrollXMarginOffset:0,scrollYMarginOffset:0,suppressScrollX:!1,suppressScrollY:!1,swipeEasing:!0,useBothWheelAxes:!1,wheelPropagation:!1,wheelSpeed:1};for(var o in l)n.settings[o]=l[o];this.containerWidth=null,this.containerHeight=null,this.contentWidth=null,this.contentHeight=null;var s=function(){return r.classList.add(m.state.focus)},a=function(){return r.classList.remove(m.state.focus)};this.isRtl="rtl"===t(r).direction,this.isNegativeScroll=function(){var t=r.scrollLeft,e=null;return r.scrollLeft=-1,e=r.scrollLeft<0,r.scrollLeft=t,e}(),this.negativeScrollAdjustment=this.isNegativeScroll?r.scrollWidth-r.clientWidth:0,this.event=new y,this.ownerDocument=r.ownerDocument||document,this.scrollbarXRail=i(m.element.rail("x")),r.appendChild(this.scrollbarXRail),this.scrollbarX=i(m.element.thumb("x")),this.scrollbarXRail.appendChild(this.scrollbarX),this.scrollbarX.setAttribute("tabindex",0),this.event.bind(this.scrollbarX,"focus",s),this.event.bind(this.scrollbarX,"blur",a),this.scrollbarXActive=null,this.scrollbarXWidth=null,this.scrollbarXLeft=null;var c=t(this.scrollbarXRail);this.scrollbarXBottom=parseInt(c.bottom,10),isNaN(this.scrollbarXBottom)?(this.isScrollbarXUsingBottom=!1,this.scrollbarXTop=u(c.top)):this.isScrollbarXUsingBottom=!0,this.railBorderXWidth=u(c.borderLeftWidth)+u(c.borderRightWidth),e(this.scrollbarXRail,{display:"block"}),this.railXMarginWidth=u(c.marginLeft)+u(c.marginRight),e(this.scrollbarXRail,{display:""}),this.railXWidth=null,this.railXRatio=null,this.scrollbarYRail=i(m.element.rail("y")),r.appendChild(this.scrollbarYRail),this.scrollbarY=i(m.element.thumb("y")),this.scrollbarYRail.appendChild(this.scrollbarY),this.scrollbarY.setAttribute("tabindex",0),this.event.bind(this.scrollbarY,"focus",s),this.event.bind(this.scrollbarY,"blur",a),this.scrollbarYActive=null,this.scrollbarYHeight=null,this.scrollbarYTop=null;var h=t(this.scrollbarYRail);this.scrollbarYRight=parseInt(h.right,10),isNaN(this.scrollbarYRight)?(this.isScrollbarYUsingRight=!1,this.scrollbarYLeft=u(h.left)):this.isScrollbarYUsingRight=!0,this.scrollbarYOuterWidth=this.isRtl?f(this.scrollbarY):null,this.railBorderYWidth=u(h.borderTopWidth)+u(h.borderBottomWidth),e(this.scrollbarYRail,{display:"block"}),this.railYMarginHeight=u(h.marginTop)+u(h.marginBottom),e(this.scrollbarYRail,{display:""}),this.railYHeight=null,this.railYRatio=null,this.reach={x:r.scrollLeft<=0?"start":r.scrollLeft>=this.contentWidth-this.containerWidth?"end":null,y:r.scrollTop<=0?"start":r.scrollTop>=this.contentHeight-this.containerHeight?"end":null},this.isAlive=!0,this.settings.handlers.forEach(function(t){return R[t](n)}),this.lastScrollTop=r.scrollTop,this.lastScrollLeft=r.scrollLeft,this.event.bind(this.element,"scroll",function(t){return n.onScroll(t)}),T(this)};return H.prototype.update=function(){this.isAlive&&(this.negativeScrollAdjustment=this.isNegativeScroll?this.element.scrollWidth-this.element.clientWidth:0,e(this.scrollbarXRail,{display:"block"}),e(this.scrollbarYRail,{display:"block"}),this.railXMarginWidth=u(t(this.scrollbarXRail).marginLeft)+u(t(this.scrollbarXRail).marginRight),this.railYMarginHeight=u(t(this.scrollbarYRail).marginTop)+u(t(this.scrollbarYRail).marginBottom),e(this.scrollbarXRail,{display:"none"}),e(this.scrollbarYRail,{display:"none"}),T(this),W(this,"top",0,!1,!0),W(this,"left",0,!1,!0),e(this.scrollbarXRail,{display:""}),e(this.scrollbarYRail,{display:""}))},H.prototype.onScroll=function(t){this.isAlive&&(T(this),W(this,"top",this.element.scrollTop-this.lastScrollTop),W(this,"left",this.element.scrollLeft-this.lastScrollLeft),this.lastScrollTop=this.element.scrollTop,this.lastScrollLeft=this.element.scrollLeft)},H.prototype.destroy=function(){this.isAlive&&(this.event.unbindAll(),l(this.scrollbarX),l(this.scrollbarY),l(this.scrollbarXRail),l(this.scrollbarYRail),this.removePsClasses(),this.element=null,this.scrollbarX=null,this.scrollbarY=null,this.scrollbarXRail=null,this.scrollbarYRail=null,this.isAlive=!1)},H.prototype.removePsClasses=function(){this.element.className=this.element.className.split(" ").filter(function(t){return!t.match(/^ps([-_].+|)$/)}).join(" ")},H});
/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!this.json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){if(a(b.target).is(this))return b.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.7",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a("#"===f?[]:f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.7",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c).prop(c,!0)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c).prop(c,!1))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")?(c.prop("checked")&&(a=!1),b.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==c.prop("type")&&(c.prop("checked")!==this.$element.hasClass("active")&&(a=!1),this.$element.toggleClass("active")),c.prop("checked",this.$element.hasClass("active")),a&&c.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target).closest(".btn");b.call(d,"toggle"),a(c.target).is('input[type="radio"], input[type="checkbox"]')||(c.preventDefault(),d.is("input,button")?d.trigger("focus"):d.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.7",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(a>this.$items.length-1||a<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){if(!this.sliding)return this.slide("next")},c.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.7",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function c(c){c&&3===c.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=b(d),f={relatedTarget:this};e.hasClass("open")&&(c&&"click"==c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(e[0],c.target)||(e.trigger(c=a.Event("hide.bs.dropdown",f)),c.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",f)))))}))}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.7",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=b(e),g=f.hasClass("open");if(c(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",c);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger(a.Event("shown.bs.dropdown",h))}return!1}},g.prototype.keydown=function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)){var d=a(this);if(c.preventDefault(),c.stopPropagation(),!d.is(".disabled, :disabled")){var e=b(d),g=e.hasClass("open");if(!g&&27!=c.which||g&&27==c.which)return 27==c.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find(".dropdown-menu"+h);if(i.length){var j=i.index(c.target);38==c.which&&j>0&&j--,40==c.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",c).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.7",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in"),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){document===a.target||this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+e).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;!e&&/destroy|hide/.test(b)||(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",a,b)};c.VERSION="3.3.7",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(a.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusin"==b.type?"focus":"hover"]=!0),c.tip().hasClass("in")||"in"==c.hoverState?void(c.hoverState="in"):(clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.isInStateTrue=function(){for(var a in this.inState)if(this.inState[a])return!0;return!1},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);if(c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusout"==b.type?"focus":"hover"]=!1),!c.isInStateTrue())return clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.getPosition(this.$viewport);h="bottom"==h&&k.bottom+m>o.bottom?"top":"top"==h&&k.top-m<o.top?"bottom":"right"==h&&k.right+l>o.width?"left":"left"==h&&k.left-l<o.left?"right":h,f.removeClass(n).addClass(h)}var p=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(p,h);var q=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",q).emulateTransitionEnd(c.TRANSITION_DURATION):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top+=g,b.left+=h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);if(this.$element.trigger(g),!g.isDefaultPrevented())return f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=window.SVGElement&&c instanceof window.SVGElement,g=d?{top:0,left:0}:f?null:b.offset(),h={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},i=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,h,i,g)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.right&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){if(!this.$tip&&(this.$tip=a(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),b?(c.inState.click=!c.inState.click,c.isInStateTrue()?c.enter(c):c.leave(c)):c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type),a.$tip&&a.$tip.detach(),a.$tip=null,a.$arrow=null,a.$viewport=null,a.$element=null})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;!e&&/destroy|hide/.test(b)||(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.7",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.7",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){
  this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.7",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.7",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return e<c&&"top";if("bottom"==this.affixed)return null!=c?!(e+this.unpin<=f.top)&&"bottom":!(e+g<=a-d)&&"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&e<=c?"top":null!=d&&i+j>=a-d&&"bottom"},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=Math.max(a(document).height(),a(document.body).height());"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
(function ($) {

    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    var Cloud = function(element, options) {
        this.elem = $(element);
        this.options = options;

        this.x = 0;
        this.y = 0;
        this.v = this.options.velocity;

        this.init();
    };

    Cloud.prototype.init = function() {
        this.max_x = this.elem.parent().width();
        this.max_y = this.elem.parent().height() - this.elem.height();

        this.x = Math.random() * this.max_x;
        this.y = Math.random() * this.max_y;

        this.setPosition(this.x, this.y);
        this.elem.animate({opacity: 1}, 600);
    };

    Cloud.prototype.setPosition = function(x,y) {
        this.elem.css('left', x);
        this.elem.css('top', y);
    };

    Cloud.prototype.move = function() {
        this.x += this.v;

        if (this.x > this.max_x) {
            this.x = - this.elem.width();
            this.y = Math.random() * this.max_y;
        }

        this.setPosition(this.x, this.y);
    };




    function CloudPlugin(option) {
        var clouds = [];
        var interval = 0;
        this.each(function() {
            var data = $(this).data();
            var options = $.extend({}, $.fn.cloud.defaults, typeof option === 'object' && option, data);
            var cloud = new Cloud(this, options);

            clouds.push(cloud);
        });


        function startAnimation() {
            interval = setInterval(function() {
                for (var i=0; i < clouds.length; i++) {
                    clouds[i].move();
                }
            }, 100);
        }

        var resizeFunction = debounce(function() {
            clearInterval(interval);
            if (viewport().width > 767)
                startAnimation();

        }, 50);

        $(window).on('resize', resizeFunction);

        resizeFunction();
    }

    $.fn.cloud = CloudPlugin;
    $.fn.cloud.defaults = {
        velocity: 1
    };

}(jQuery));
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ApiAi =
    /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/ 		if(installedModules[moduleId]) {
            /******/ 			return installedModules[moduleId].exports;
            /******/ 		}
        /******/ 		// Create a new module (and put it into the cache)
        /******/ 		var module = installedModules[moduleId] = {
            /******/ 			i: moduleId,
            /******/ 			l: false,
            /******/ 			exports: {}
            /******/ 		};
        /******/
        /******/ 		// Execute the module function
        /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/ 		module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/ 		return module.exports;
        /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/ 	__webpack_require__.i = function(value) { return value; };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
        /******/ 		if(!__webpack_require__.o(exports, name)) {
            /******/ 			Object.defineProperty(exports, name, {
                /******/ 				configurable: false,
                /******/ 				enumerable: true,
                /******/ 				get: getter
                /******/ 			});
            /******/ 		}
        /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
        /******/ 		var getter = module && module.__esModule ?
            /******/ 			function getDefault() { return module['default']; } :
            /******/ 			function getModuleExports() { return module; };
        /******/ 		__webpack_require__.d(getter, 'a', getter);
        /******/ 		return getter;
        /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "/target/";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 8);
    /******/ })
/************************************************************************/
/******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var ApiAiConstants;
        (function (ApiAiConstants) {
            var AVAILABLE_LANGUAGES;
            (function (AVAILABLE_LANGUAGES) {
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["EN"] = "en"] = "EN";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["DE"] = "de"] = "DE";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["ES"] = "es"] = "ES";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["PT_BR"] = "pt-BR"] = "PT_BR";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["ZH_HK"] = "zh-HK"] = "ZH_HK";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["ZH_CN"] = "zh-CN"] = "ZH_CN";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["ZH_TW"] = "zh-TW"] = "ZH_TW";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["NL"] = "nl"] = "NL";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["FR"] = "fr"] = "FR";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["IT"] = "it"] = "IT";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["JA"] = "ja"] = "JA";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["KO"] = "ko"] = "KO";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["PT"] = "pt"] = "PT";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["RU"] = "ru"] = "RU";
                AVAILABLE_LANGUAGES[AVAILABLE_LANGUAGES["UK"] = "uk"] = "UK";
            })(AVAILABLE_LANGUAGES = ApiAiConstants.AVAILABLE_LANGUAGES || (ApiAiConstants.AVAILABLE_LANGUAGES = {}));
            ApiAiConstants.VERSION = "2.0.0-beta.20";
            ApiAiConstants.DEFAULT_BASE_URL = "https://api.api.ai/v1/";
            ApiAiConstants.DEFAULT_API_VERSION = "20150910";
            ApiAiConstants.DEFAULT_CLIENT_LANG = AVAILABLE_LANGUAGES.EN;
        })(ApiAiConstants = exports.ApiAiConstants || (exports.ApiAiConstants = {}));


        /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return function (d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        Object.defineProperty(exports, "__esModule", { value: true });
        var ApiAiBaseError = (function (_super) {
            __extends(ApiAiBaseError, _super);
            function ApiAiBaseError(message) {
                var _this = _super.call(this, message) || this;
                _this.message = message;
                _this.stack = new Error().stack;
                return _this;
            }
            return ApiAiBaseError;
        }(Error));
        exports.ApiAiBaseError = ApiAiBaseError;
        var ApiAiClientConfigurationError = (function (_super) {
            __extends(ApiAiClientConfigurationError, _super);
            function ApiAiClientConfigurationError(message) {
                var _this = _super.call(this, message) || this;
                _this.name = "ApiAiClientConfigurationError";
                return _this;
            }
            return ApiAiClientConfigurationError;
        }(ApiAiBaseError));
        exports.ApiAiClientConfigurationError = ApiAiClientConfigurationError;
        var ApiAiRequestError = (function (_super) {
            __extends(ApiAiRequestError, _super);
            function ApiAiRequestError(message, code) {
                if (code === void 0) { code = null; }
                var _this = _super.call(this, message) || this;
                _this.message = message;
                _this.code = code;
                _this.name = "ApiAiRequestError";
                return _this;
            }
            return ApiAiRequestError;
        }(ApiAiBaseError));
        exports.ApiAiRequestError = ApiAiRequestError;


        /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var Errors_1 = __webpack_require__(1);
        var XhrRequest_1 = __webpack_require__(7);
        var Request = (function () {
            function Request(apiAiClient, options) {
                this.apiAiClient = apiAiClient;
                this.options = options;
                this.uri = this.apiAiClient.getApiBaseUrl() + "query?v=" + this.apiAiClient.getApiVersion();
                this.requestMethod = XhrRequest_1.default.Method.POST;
                this.headers = {
                    Authorization: "Bearer " + this.apiAiClient.getAccessToken(),
                };
                this.options.lang = this.apiAiClient.getApiLang();
                this.options.sessionId = this.apiAiClient.getSessionId();
            }
            Request.handleSuccess = function (xhr) {
                return Promise.resolve(JSON.parse(xhr.responseText));
            };
            Request.handleError = function (xhr) {
                var error = new Errors_1.ApiAiRequestError(null);
                try {
                    var serverResponse = JSON.parse(xhr.responseText);
                    if (serverResponse.status && serverResponse.status.errorDetails) {
                        error = new Errors_1.ApiAiRequestError(serverResponse.status.errorDetails, serverResponse.status.code);
                    }
                    else {
                        error = new Errors_1.ApiAiRequestError(xhr.statusText, xhr.status);
                    }
                }
                catch (e) {
                    error = new Errors_1.ApiAiRequestError(xhr.statusText, xhr.status);
                }
                return Promise.reject(error);
            };
            Request.prototype.perform = function (overrideOptions) {
                if (overrideOptions === void 0) { overrideOptions = null; }
                var options = overrideOptions ? overrideOptions : this.options;
                return XhrRequest_1.default.ajax(this.requestMethod, this.uri, options, this.headers)
                    .then(Request.handleSuccess.bind(this))
                    .catch(Request.handleError.bind(this));
            };
            return Request;
        }());
        exports.default = Request;


        /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
        Object.defineProperty(exports, "__esModule", { value: true });
        var ApiAiConstants_1 = __webpack_require__(0);
        var Errors_1 = __webpack_require__(1);
        var EventRequest_1 = __webpack_require__(5);
        var TextRequest_1 = __webpack_require__(6);
        __export(__webpack_require__(4));
        var ApiAiConstants_2 = __webpack_require__(0);
        exports.ApiAiConstants = ApiAiConstants_2.ApiAiConstants;
        var ApiAiClient = (function () {
            function ApiAiClient(options) {
                if (!options || !options.accessToken) {
                    throw new Errors_1.ApiAiClientConfigurationError("Access token is required for new ApiAi.Client instance");
                }
                this.accessToken = options.accessToken;
                this.apiLang = options.lang || ApiAiConstants_1.ApiAiConstants.DEFAULT_CLIENT_LANG;
                this.apiVersion = options.version || ApiAiConstants_1.ApiAiConstants.DEFAULT_API_VERSION;
                this.apiBaseUrl = options.baseUrl || ApiAiConstants_1.ApiAiConstants.DEFAULT_BASE_URL;
                this.sessionId = options.sessionId || this.guid();
            }
            ApiAiClient.prototype.textRequest = function (query, options) {
                if (options === void 0) { options = {}; }
                if (!query) {
                    throw new Errors_1.ApiAiClientConfigurationError("Query should not be empty");
                }
                options.query = query;
                return new TextRequest_1.default(this, options).perform();
            };
            ApiAiClient.prototype.eventRequest = function (eventName, eventData, options) {
                if (eventData === void 0) { eventData = {}; }
                if (options === void 0) { options = {}; }
                if (!eventName) {
                    throw new Errors_1.ApiAiClientConfigurationError("Event name can not be empty");
                }
                options.event = { name: eventName, data: eventData };
                return new EventRequest_1.EventRequest(this, options).perform();
            };
            // @todo: implement local tts request
            /*public ttsRequest(query) {
                if (!query) {
                    throw new ApiAiClientConfigurationError("Query should not be empty");
                }
                return new TTSRequest(this).makeTTSRequest(query);
            }*/
            /*public userEntitiesRequest(options: IRequestOptions = {}): UserEntitiesRequest {
                return new UserEntitiesRequest(this, options);
            }*/
            ApiAiClient.prototype.getAccessToken = function () {
                return this.accessToken;
            };
            ApiAiClient.prototype.getApiVersion = function () {
                return (this.apiVersion) ? this.apiVersion : ApiAiConstants_1.ApiAiConstants.DEFAULT_API_VERSION;
            };
            ApiAiClient.prototype.getApiLang = function () {
                return (this.apiLang) ? this.apiLang : ApiAiConstants_1.ApiAiConstants.DEFAULT_CLIENT_LANG;
            };
            ApiAiClient.prototype.getApiBaseUrl = function () {
                return (this.apiBaseUrl) ? this.apiBaseUrl : ApiAiConstants_1.ApiAiConstants.DEFAULT_BASE_URL;
            };
            ApiAiClient.prototype.setSessionId = function (sessionId) {
                this.sessionId = sessionId;
            };
            ApiAiClient.prototype.getSessionId = function () {
                return this.sessionId;
            };
            /**
             * generates new random UUID
             * @returns {string}
             */
            ApiAiClient.prototype.guid = function () {
                var s4 = function () { return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); };
                return s4() + s4() + "-" + s4() + "-" + s4() + "-" +
                    s4() + "-" + s4() + s4() + s4();
            };
            return ApiAiClient;
        }());
        exports.ApiAiClient = ApiAiClient;


        /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        var IStreamClient;
        (function (IStreamClient) {
            var ERROR;
            (function (ERROR) {
                ERROR[ERROR["ERR_NETWORK"] = 0] = "ERR_NETWORK";
                ERROR[ERROR["ERR_AUDIO"] = 1] = "ERR_AUDIO";
                ERROR[ERROR["ERR_SERVER"] = 2] = "ERR_SERVER";
                ERROR[ERROR["ERR_CLIENT"] = 3] = "ERR_CLIENT";
            })(ERROR = IStreamClient.ERROR || (IStreamClient.ERROR = {}));
            var EVENT;
            (function (EVENT) {
                EVENT[EVENT["MSG_WAITING_MICROPHONE"] = 0] = "MSG_WAITING_MICROPHONE";
                EVENT[EVENT["MSG_MEDIA_STREAM_CREATED"] = 1] = "MSG_MEDIA_STREAM_CREATED";
                EVENT[EVENT["MSG_INIT_RECORDER"] = 2] = "MSG_INIT_RECORDER";
                EVENT[EVENT["MSG_RECORDING"] = 3] = "MSG_RECORDING";
                EVENT[EVENT["MSG_SEND"] = 4] = "MSG_SEND";
                EVENT[EVENT["MSG_SEND_EMPTY"] = 5] = "MSG_SEND_EMPTY";
                EVENT[EVENT["MSG_SEND_EOS_OR_JSON"] = 6] = "MSG_SEND_EOS_OR_JSON";
                EVENT[EVENT["MSG_WEB_SOCKET"] = 7] = "MSG_WEB_SOCKET";
                EVENT[EVENT["MSG_WEB_SOCKET_OPEN"] = 8] = "MSG_WEB_SOCKET_OPEN";
                EVENT[EVENT["MSG_WEB_SOCKET_CLOSE"] = 9] = "MSG_WEB_SOCKET_CLOSE";
                EVENT[EVENT["MSG_STOP"] = 10] = "MSG_STOP";
                EVENT[EVENT["MSG_CONFIG_CHANGED"] = 11] = "MSG_CONFIG_CHANGED";
            })(EVENT = IStreamClient.EVENT || (IStreamClient.EVENT = {}));
        })(IStreamClient = exports.IStreamClient || (exports.IStreamClient = {}));


        /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return function (d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        Object.defineProperty(exports, "__esModule", { value: true });
        var Request_1 = __webpack_require__(2);
        var EventRequest = (function (_super) {
            __extends(EventRequest, _super);
            function EventRequest() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return EventRequest;
        }(Request_1.default));
        exports.EventRequest = EventRequest;


        /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return function (d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        Object.defineProperty(exports, "__esModule", { value: true });
        var Request_1 = __webpack_require__(2);
        var TextRequest = (function (_super) {
            __extends(TextRequest, _super);
            function TextRequest() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TextRequest;
        }(Request_1.default));
        exports.default = TextRequest;


        /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        /**
         * quick ts implementation of example from
         * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise
         * with some minor improvements
         * @todo: test (?)
         * @todo: add node.js implementation with node's http inside. Just to make SDK cross-platform
         */
        var XhrRequest = (function () {
            function XhrRequest() {
            }
            // Method that performs the ajax request
            XhrRequest.ajax = function (method, url, args, headers, options) {
                if (args === void 0) { args = null; }
                if (headers === void 0) { headers = null; }
                if (options === void 0) { options = {}; }
                // Creating a promise
                return new Promise(function (resolve, reject) {
                    // Instantiates the XMLHttpRequest
                    var client = XhrRequest.createXMLHTTPObject();
                    var uri = url;
                    var payload = null;
                    // Add given payload to get request
                    if (args && (method === XhrRequest.Method.GET)) {
                        uri += "?";
                        var argcount = 0;
                        for (var key in args) {
                            if (args.hasOwnProperty(key)) {
                                if (argcount++) {
                                    uri += "&";
                                }
                                uri += encodeURIComponent(key) + "=" + encodeURIComponent(args[key]);
                            }
                        }
                    }
                    else if (args) {
                        if (!headers) {
                            headers = {};
                        }
                        headers["Content-Type"] = "application/json; charset=utf-8";
                        payload = JSON.stringify(args);
                    }
                    for (var key in options) {
                        if (key in client) {
                            client[key] = options[key];
                        }
                    }
                    // hack: method[method] is somewhat like .toString for enum Method
                    // should be made in normal way
                    client.open(XhrRequest.Method[method], uri, true);
                    // Add given headers
                    if (headers) {
                        for (var key in headers) {
                            if (headers.hasOwnProperty(key)) {
                                client.setRequestHeader(key, headers[key]);
                            }
                        }
                    }
                    payload ? client.send(payload) : client.send();
                    client.onload = function () {
                        if (client.status >= 200 && client.status < 300) {
                            // Performs the function "resolve" when this.status is equal to 2xx
                            resolve(client);
                        }
                        else {
                            // Performs the function "reject" when this.status is different than 2xx
                            reject(client);
                        }
                    };
                    client.onerror = function () {
                        reject(client);
                    };
                });
            };
            XhrRequest.get = function (url, payload, headers, options) {
                if (payload === void 0) { payload = null; }
                if (headers === void 0) { headers = null; }
                if (options === void 0) { options = {}; }
                return XhrRequest.ajax(XhrRequest.Method.GET, url, payload, headers, options);
            };
            XhrRequest.post = function (url, payload, headers, options) {
                if (payload === void 0) { payload = null; }
                if (headers === void 0) { headers = null; }
                if (options === void 0) { options = {}; }
                return XhrRequest.ajax(XhrRequest.Method.POST, url, payload, headers, options);
            };
            XhrRequest.put = function (url, payload, headers, options) {
                if (payload === void 0) { payload = null; }
                if (headers === void 0) { headers = null; }
                if (options === void 0) { options = {}; }
                return XhrRequest.ajax(XhrRequest.Method.PUT, url, payload, headers, options);
            };
            XhrRequest.delete = function (url, payload, headers, options) {
                if (payload === void 0) { payload = null; }
                if (headers === void 0) { headers = null; }
                if (options === void 0) { options = {}; }
                return XhrRequest.ajax(XhrRequest.Method.DELETE, url, payload, headers, options);
            };
            XhrRequest.createXMLHTTPObject = function () {
                var xmlhttp = null;
                for (var _i = 0, _a = XhrRequest.XMLHttpFactories; _i < _a.length; _i++) {
                    var i = _a[_i];
                    try {
                        xmlhttp = i();
                    }
                    catch (e) {
                        continue;
                    }
                    break;
                }
                return xmlhttp;
            };
            XhrRequest.XMLHttpFactories = [
                function () { return new XMLHttpRequest(); },
                function () { return new window["ActiveXObject"]("Msxml2.XMLHTTP"); },
                function () { return new window["ActiveXObject"]("Msxml3.XMLHTTP"); },
                function () { return new window["ActiveXObject"]("Microsoft.XMLHTTP"); }
            ];
            return XhrRequest;
        }());
        (function (XhrRequest) {
            var Method;
            (function (Method) {
                Method[Method["GET"] = "GET"] = "GET";
                Method[Method["POST"] = "POST"] = "POST";
                Method[Method["PUT"] = "PUT"] = "PUT";
                Method[Method["DELETE"] = "DELETE"] = "DELETE";
            })(Method = XhrRequest.Method || (XhrRequest.Method = {}));
        })(XhrRequest || (XhrRequest = {}));
        exports.default = XhrRequest;


        /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {

        module.exports = __webpack_require__(3);


        /***/ })
    /******/ ]);
//# sourceMappingURL=ApiAi.js.map
(function($) {
    "use strict";

    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    var GurtBot = function(element, options) {
        this.chatWindow = $(element);
        this.elem = $(element).find(options.chatInput);
        this.options = options;
        this.hasInteractedWithChat = false;
        this.hasIntroAnimation = false;
        this.showIntroOnOpen = false;
        this.animateScroll = true;
        this.enableSearch = false;
        this.isLastMessageFollowup = false;
        this.followupContext = '';
        this.followupContextValue = '';
        this.smalltalkFollowupTimeout = null;
        this.isChatLocked = false;

        this.userSearchTerm = '';

        this.gurtAnimation = null;

        this.dataLayer = window.dataLayer || [];

        this.client = new ApiAi.ApiAiClient({accessToken: this.options.accessToken});
        this.chatHistory = window.sessionStorage;

        this.init();
        this.initChatWindow();

        if (this.chatWindow.hasClass('intro-animation')) {
            this.showIntroAnimation();
            $(window).on('load', function() {
                $(document).trigger('start-animation');
            });
        }

        if (this.chatWindow.data('show-intro-animation')) {
            this.showIntroOnOpen = true;
            this.addUserNotification();
        }

        this.setEvents();

        this.loadMessagesFromSession();

        if (!this.showIntroOnOpen && !this.hasIntroAnimation) {
            this.checkContentContextualMessages();
        }
    };


    GurtBot.prototype.init = function() {

        var self = this;
        this.elem.on('keydown', function(e) {

            setTimeout(function() {
                var value = self.elem.val();
                if (value !== '') $(self.options.gurtBtn).removeClass('disabled');
                else $(self.options.gurtBtn).addClass('disabled');

                clearTimeout(self.smalltalkFollowupTimeout);

                if (e.which === 13) {
                    self.sendRequest(value);
                    self.elem.val('');
                    $(self.options.gurtBtn).addClass('disabled');
                }
            }, 0);


        });

        this.perfectScroll = new PerfectScrollbar(this.options.gurtBody);
    };


    GurtBot.prototype.initChatWindow = function() {
        $(this.options.gurtBody).css('height', '');
        var wh = viewport().height;

        var top = parseInt(this.chatWindow.css('top'));
        if (top !== 0) {
            this.chatWindow.css('height', wh).css('top', -wh);
            this.chatWindow.show();
        }

        var hh = $(this.options.gurtHeader).outerHeight(true);
        var ih = $(this.options.gurtInput).outerHeight(true);
        $(this.options.gurtBody).css('height', (wh - hh - ih));

        $(this.options.chatContainer).css('position','absolute').css('top',$(this.options.gurtBody).outerHeight());

        this.scrollChatWindow();
    };


    GurtBot.prototype.setEvents = function() {
        var self = this;
        $(this.options.gurtOpen).on('click', function(e) {
            e.preventDefault();
            self.openGurt();
        });

        $(this.options.gurtClose).on('click', function(e) {
            e.preventDefault();
            self.closeGurt();
        });

        $(this.options.gurtBtn).on('click', function(e) {
            e.preventDefault();

            var value = self.elem.val();
            if (value !== '') {
                self.sendRequest(value);
                self.elem.val('');
                $(self.options.gurtBtn).addClass('disabled');
            }
        });
    };


    GurtBot.prototype.showIntroAnimation = function() {
        this.chatWindow.css('top', 0);
        this.chatWindow.css('position', 'fixed');
        this.chatWindow.css('height', '100%');
        $('body').addClass('gurt-chat-open');

        this.hasIntroAnimation = true;
        this.showIntroOnOpen = false;
        //this.chatWindow.removeClass('intro-animation');

        var self = this;
        this.gurtAnimation = new GurtIntroAnimation(this.chatWindow, this.options, function() {
            self.afterAnimation();
        });

        this.gurtAnimation.scrollFunction = function() {
            self.initChatWindow();
            self.scrollChatWindow();
        };
    };

    GurtBot.prototype.openGurt = function() {
        this.removeGurtNotification();
        clearTimeout(this.contentContextualMessageTimeout);
        this.contentContextualMessageTimeout = null;
        var self = this;

        this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Global',label: 'Open Gurt'});

        this.initChatWindow();

        $('body').addClass('gurt-chat-open');
        this.chatWindow.animate({top: 0}, self.options.gurtWindowAnimationSpeed).promise().then(function() {
            self.chatWindow.css('position', 'fixed');
            self.chatWindow.css('height', '100%');

            // if (!self.hasInteractedWithChat && !self.hasIntroAnimation && !self.showIntroOnOpen) {
            //     self.sendEvent('welcome');
            // }

            if (self.showIntroOnOpen) {
                self.chatWindow.addClass('intro-animation');
                self.showIntroAnimation();
                $(document).trigger('start-animation');
            }

            if (self.followupContextValue !== '') {
                self.showMessageLoader();
                self.sendEvent(self.followupContextValue);
                self.followupContextValue = '';
                self.hasInteractedWithChat = true;
            } else if (!self.hasInteractedWithChat && !self.hasIntroAnimation && !self.showIntroOnOpen) {
                self.sendEvent('after-intro');
                self.hasInteractedWithChat = true;
            }

        });
    };

    GurtBot.prototype.closeGurt = function() {
        var self = this;

        clearTimeout(this.smalltalkFollowupTimeout);

        this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Global',label: 'Close Gurt'});

        this.chatWindow.css('height', this.chatWindow.outerHeight());
        this.chatWindow.css('position', '');

        this.chatWindow.animate({top: -this.chatWindow.outerHeight()}, this.options.gurtWindowAnimationSpeed).promise().then(function() {
            $('body').removeClass('gurt-chat-open');

            if (self.gurtAnimation != null) {
                self.gurtAnimation.destroy();
                self.gurtAnimation = null;
            }
        });
    };


    GurtBot.prototype.afterAnimation = function() {
        //this.saveMessageInSession('gurt', this.options.animation.gurtIntroMessage);
        //this.sendEvent('after-intro');

        var currentUrl = window.location.pathname;

        this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Animation',label: 'Success'});

        var self = this;
        $.each(this.options.contentContextualFollowup, function(index, value){
            if (currentUrl.match(index)) {
                self.sendEvent(value);
            }
        });
    };

    GurtBot.prototype.sendRequest = function(value) {

        if (this.isChatLocked) return;
        this.disableActions();

        this.isChatLocked = true;
        this.hasInteractedWithChat = true;

        var self = this;

        if (value === 'clear') {

            setTimeout(function() {
                self.clear();
                var d = new Date();
                //document.cookie = 'intro-animation=;expires=' + d.toGMTString()+ ";path=/";
                Cookies.remove('gurt-intro-animation');
                window.location.href = "/";
            }, 100);
            return;
        }

        this.addMessageToChat(value, 'user');

        if (this.enableSearch || (this.userSearchTerm !== '' && value.toLowerCase() === 'yes')) {
            var searchTerm = value;
            if (this.userSearchTerm !== '') searchTerm = this.userSearchTerm;

            this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Search',label: searchTerm});

            window.location.href = "/search/results?s=" + encodeURIComponent(searchTerm);
            return;
        }

        if (this.userSearchTerm !== '' && value.toLowerCase() === 'No') {
            this.sendEvent('default-intent-followup');
            return;
        }

        setTimeout(function() {
            self.showMessageLoader();

            setTimeout(function() {
                self.client.textRequest(value).then(function(resp) {

                    self.processApiResponse(resp);

                }).catch(function(err) {
                    console.log('error', err);
                });
            }, 500 + Math.random()*500);

        }, 800 + Math.random()*500);

    };

    GurtBot.prototype.sendEvent = function(event_name) {
        var self = this;
        this.client.eventRequest(event_name).then(function(resp) {
            self.processApiResponse(resp);
        }).catch(function(err) {
            console.log('error', err);
        });
    };

    GurtBot.prototype.processApiResponse = function(resp) {
        var self = this;

        this.hideMessageLoader();

        if (resp.result.metadata.intentName === 'Default Fallback Intent' ) {
            this.userSearchTerm = resp.result.resolvedQuery;
            resp.result.fulfillment.speech = resp.result.fulfillment.speech.replace('#search#', this.userSearchTerm);

            this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Misunderstood Phrase',label: this.userSearchTerm});
        } else {
            this.userSearchTerm = '';
        }

        if (resp.result.action.indexOf('smalltalk') === 0 ||
            resp.result.action === 'conversation-followup'
        ) {
            this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Small Talk',label: resp.result.resolvedQuery});

            if (resp.result.action !== "smalltalk.confirmation.no") {
                this.smalltalkFollowupTimeout = setTimeout(function () {
                    self.sendEvent('smalltalk-followup')
                }, this.options.smalltalkFollowupDelay);
            }
        }

        this.addMessageToChat(resp.result.fulfillment.speech, 'gurt');

        if (resp.result.action === 'endSession') {
            this.clear();
            return;
        }

        if (resp.result.action === 'search') {
            this.enableSearch = true;

            $(this.options.gurtBtn).val('Search');
        }

        if (resp.result.action === 'closeChat') {
            setTimeout(function() {
                self.closeGurt();
            }, 2000);
        }


        var payloadData = resp.result.fulfillment.data;
        for (var i=0; i < resp.result.fulfillment.messages.length; i++) {

            if (resp.result.fulfillment.messages[i].type === 4) {
                payloadData = resp.result.fulfillment.messages[i].payload;
                break;
            }

        }

        if (typeof payloadData !== 'undefined') {
            if (typeof payloadData.redirect !== 'undefined') {

                // we're not saving redirect in session to disable contextual followup
                // this.saveMessageInSession('redirect', {
                //     redirect_url: payloadData.redirect,
                //     intent: resp.result.metadata.intentName
                // });

                self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Redirect', label: payloadData.redirect['page_name']});

                setTimeout(function() {
                    window.location.href = payloadData.redirect['url'];
                }, this.options.redirectTimeout);

                return;
            }

            if (typeof payloadData.tiles !== 'undefined' ||
                typeof payloadData.simpleButtons !== 'undefined') {


                setTimeout(function() {
                    self.showMessageLoader();
                    setTimeout(function() {

                        if (typeof payloadData.tiles !== 'undefined' && payloadData.tiles.length > 0) {
                            self.addSliderToChat(payloadData.tiles, resp.result.metadata.intentName, function() {
                                self.hideMessageLoader();
                                self.scrollChatWindow();
                            });
                        }

                        if (typeof payloadData.simpleButtons !== 'undefined' && payloadData.simpleButtons.length > 0) {
                            if (typeof payloadData.tiles === 'undefined' || payloadData.tiles.length === 0) {
                                self.hideMessageLoader();
                            }

                            self.addButtonsToChat(payloadData.simpleButtons);

                            if (typeof payloadData.tiles === 'undefined' || payloadData.tiles.length === 0) {
                                //scroll only if there are no tiles in current response
                                self.scrollChatWindow();
                            }
                        }

                        self.isChatLocked = false;

                        if (self.contentContextualMessageTimeout != null) {
                            self.saveMessageInSession('followup', self.followupContext);
                        }
                    }, 800 + Math.random() * 1000);
                }, 600 + Math.random()*600);


            }
        } else {
            self.isChatLocked = false;

            // if (resp.result.action === '' && resp.result.fulfillment.speech.substr(resp.result.fulfillment.speech.length-1) !== '?') {
            //     self.smalltalkFollowupTimeout = setTimeout(function () {
            //         self.sendEvent('smalltalk-followup')
            //     }, self.options.smalltalkFollowupDelay);
            // }
        }
    };

    GurtBot.prototype.addMessageToChat = function(message, type) {
        if (message === '') return;

        var template;
        if (type === 'user') {
            template = this.options.userChatMessageTemplate;
        } else {
            template = this.options.gurtChatMessageTemplate;
        }

        this.saveMessageInSession(type, message);

        template = template.replace('{{message}}', message);
        $(this.options.chatContainer).append($(template));

        this.scrollChatWindow();
    };

    GurtBot.prototype.showMessageLoader = function() {
        var template = this.options.gurtChatMessageTemplate;

        template = template.replace('{{message}}', this.options.loader);

        var loader = $(template).addClass('gurt-message-loader');
        $(this.options.chatContainer).append(loader);

        this.scrollChatWindow();
    };

    GurtBot.prototype.hideMessageLoader = function() {
        $(this.options.chatContainer).find('.gurt-message-loader').remove();
    };


    GurtBot.prototype.addButtonsToChat = function(buttons) {
        var self = this;

        this.saveMessageInSession('simple_buttons', buttons);

        var onButtonClick = function() {

            if ( $(this).closest('.btn-container').hasClass('disabled') )
                return;

            if ($(this).attr('data-ai-message') !== '') {
                var aiMessage = $(this).data('aiMessage');
                self.sendRequest(aiMessage);

                self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Button Click', label: aiMessage});
            } else {
                var url = $(this).data('url');
                self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Redirect', label: $(this).text()});

                //faking gurt response - no need to go to DialogFlow
                self.fakeGurtMessage($(this).text(), self.options.gurtRedirectMessage, url);
            }
        };

        var btnContainer = $("<div></div>", {class: 'btn-container pull-right'});
        for (var i=0; i < buttons.length; i++) {
            var btn = this.options.buttonTemplate;

            btn = btn.replace('{{url}}', buttons[i].url)
                     .replace('{{label}}', buttons[i].label);

            if (typeof buttons[i].aiMessage !== 'undefined') {
                btn = btn.replace('{{aiMessage}}', buttons[i].aiMessage);
            } else {
                btn = btn.replace('{{aiMessage}}', "");
            }

            var btnObj = $(btn);
            btnObj.on('click', onButtonClick);
            btnContainer.append(btnObj);
        }

        $(this.options.chatContainer).append($("<div></div>", {class: 'clearfix'}).append(btnContainer));
        //this.scrollChatWindow();

    };


    GurtBot.prototype.addSliderToChat = function(data, intentName, callback) {
        var id = 'chat-slider-' + Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);

        this.saveMessageInSession('slider', data);

        var self = this;
        var onSlideClick = function(e) {
            e.preventDefault();

            if ( $(this).closest('.flexslider').hasClass('disabled') )
                return;

            var intent = $(this).data('intent');
            if ($(this).attr('data-ai-message')) {

                var aiMessage = $(this).data('aiMessage');
                self.sendRequest(aiMessage);


                self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Tile Click - ' + intent, label: aiMessage});
            } else {
                var url = $(this).attr('href');

                // we're not saving redirect in session to disable contextual followup
                // self.saveMessageInSession('redirect', {
                //     redirect_url: url,
                //     intent: intentName
                // });

                if (intent === 'Organic Flow') {
                    self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Tile Click - ' + intent, label: $(this).text()});
                } else {
                    self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Redirect', label: $(this).text()});
                }

                //faking gurt response - no need to go to DialogFlow
                self.fakeGurtMessage($(this).text(), self.options.gurtRedirectMessage, url);

            }
        };

        var onStart = function() {
            sliderContainer.imagesLoaded(function() {
                //sliderContainer.find('.tile').show();
                sliderContainer.css('opacity',1);
                if (typeof callback !== 'undefined') callback();
            });
        };

        var slider = $('<ul></ul>', {class: 'slides'});
        for (var i=0; i < data.length; i++) {
            var slide = this.options.slideTemplate;

            var label = data[i].label;
            if (label.length > 40) label = "<small>"+label+"</small>";

            slide = slide.replace('{{url}}', data[i].url)
                .replace('{{label}}', label)
                .replace('{{intent}}',data[i].intent)
                .replace('{{image_url}}', data[i].image_url);

            if (typeof data[i].aiMessage !== 'undefined') {
                slide = slide.replace('{{aiMessage}}', data[i].aiMessage);
            } else {
                slide = slide.replace('{{aiMessage}}', "");
            }

            var slideObj = $(slide);
            slideObj.find('a').on('click', onSlideClick);
            slider.append(slideObj);
        }

        var sliderNavigation = $(this.options.sliderNavigationTemplate);
        var sliderContainer = $('<div></div>', {class: 'flexslider', id: id}).append(slider).append(sliderNavigation).css('opacity',0);

        $(self.options.chatContainer).append(sliderContainer);

        sliderContainer.flexslider($.extend(self.options.sliderDefaultOptions, {
            start: onStart
        }));
        var flexSlider = sliderContainer.data('flexslider');

        sliderNavigation.find('.prev').on('click', function() {
            self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Button Click',label: 'Carousel'});
            flexSlider.flexslider('prev');
        });
        sliderNavigation.find('.next').on('click', function() {
            self.dataLayer.push({event: self.options.dataLayerEvent, action: 'Button Click',label: 'Carousel'});
            flexSlider.flexslider('next');
        });

        // sliderContainer.imagesLoaded(function() {
        //     console.log('slider height: ' , sliderContainer.outerHeight());
        //     self.scrollChatWindow();
        // });

    };

    GurtBot.prototype.disableActions = function() {
        $(this.options.chatContainer).find(".flexslider:not('.disabled')").addClass('disabled');
        $(this.options.chatContainer).find(".btn-container:not('.disabled')").addClass('disabled');
    };

    GurtBot.prototype.fakeGurtMessage = function(userMessage, gurtMessage, redirectUrl) {
        if (typeof gurtMessage === 'undefined') gurtMessage = this.options.gurtRedirectMessage;

        var self = this;

        this.addMessageToChat(userMessage, "user");
        setTimeout(function() {
            self.showMessageLoader();
            setTimeout(function() {
                self.hideMessageLoader();
                self.addMessageToChat(gurtMessage,"gurt");

                setTimeout(function() {
                    window.location.href = redirectUrl;
                }, 1500);

            }, 800 + Math.random()*1000);
        }, 600 + Math.random()*600);
    };

    GurtBot.prototype.saveMessageInSession = function(message_type, message) {
        var msg = {
            message_type: message_type,
            message: message
        };

        var chat = JSON.parse( this.chatHistory.getItem('gurt-chat') );
        if (chat === null) {
            chat = [];
        }
        chat.push(msg);
        this.chatHistory.setItem('gurt-chat', JSON.stringify(chat));
    };

    GurtBot.prototype.loadMessagesFromSession = function() {
        var chat = JSON.parse( this.chatHistory.getItem('gurt-chat') );
        this.chatHistory.removeItem('gurt-chat');

        if (chat !== null) {
            this.animateScroll = false;

            for (var i=0; i < chat.length; i++) {
                var msg = chat[i];

                switch (msg.message_type) {
                    case 'user':
                    case 'gurt':
                        this.addMessageToChat(msg.message, msg.message_type);
                        this.isLastMessageFollowup = false;
                        break;
                    case 'slider':
                        this.addSliderToChat(msg.message, '', function() {
                            self.scrollChatWindow();
                        });
                        this.isLastMessageFollowup = false;
                        break;
                    case 'redirect':
                        //this.sendContextualFolloupMessage(msg.message);
                        break;
                    case 'simple_buttons':
                        this.addButtonsToChat(msg.message);
                        this.isLastMessageFollowup = false;
                        break;
                    case 'followup':
                        this.saveMessageInSession('followup', msg.message);
                        this.isLastMessageFollowup = true;
                        this.followupContext = msg.message;
                        break;
                }

            }
            //this.hasInteractedWithChat = true;

            this.disableActions();

            var self = this;
            $(this.options.chatContainer).imagesLoaded(function() {
                var height = $(self.options.chatContainer).height();

                self.perfectScroll.update();
                self.scrollChatWindow();

                self.animateScroll = true;
            });
        }
    };

    GurtBot.prototype.sendContextualFolloupMessage = function(message) {
        var foundFollowup = false;

        switch (message.intent) {
            case 'Products Flow - Category':
            case 'Products Flow - Subcategory':

                this.sendEvent('followup-products');
                foundFollowup = true;
                break;

            case 'Recipes Flow - other':

                this.sendEvent('followup-recipes');
                foundFollowup = true;
                break;

            case 'Organic Flow':

                this.sendEvent('followup-organic');
                foundFollowup = true;
                break;

            default:
                this.sendEvent('followup-products');
                foundFollowup = true;
                break;
        }

        if (foundFollowup) {
            this.addUserNotification();
        }
    };

    GurtBot.prototype.checkContentContextualMessages = function() {
        var currentUrl = window.location.pathname;

        if (!this.isLastMessageFollowup || !currentUrl.match(this.followupContext)) {
            var self = this;
            $.each(this.options.contentContextualFollowup, function (index, value) {
                //if (currentUrl.indexOf(index) >= 0) {
                if (currentUrl.match(index)) {

                    self.followupContext = index;
                    self.followupContextValue = value;
                    self.contentContextualMessageTimeout = setTimeout(function () {
                        self.addUserNotification();
                    }, self.options.contentContextualNotificationDelay);

                }
            });

        }

    };

    GurtBot.prototype.scrollChatWindow = function() {
        var bodyHeight = $(this.options.gurtBody).outerHeight();
        var containerHeight = $(this.options.chatContainer).outerHeight();

        this.perfectScroll.update();

        if (containerHeight > bodyHeight) {
            $(this.options.chatContainer).css('position','').css('bottom','');

            if (this.animateScroll) {
                $(this.options.chatContainer).parent().stop().animate({scrollTop: containerHeight - bodyHeight}, 300);
            } else {
                $(this.options.chatContainer).parent().scrollTop(containerHeight);
            }
        } else {
            if (this.animateScroll) {
                $(this.options.chatContainer).animate({top: bodyHeight - containerHeight}, 300);
            } else {
                $(this.options.chatContainer).css('top', bodyHeight - containerHeight);
            }
            $(this.options.chatContainer).parent().scrollTop(0);
        }

    };

    GurtBot.prototype.resizeChatSliders = function() {
        $(this.options.chatContainer).find('.flexslider').each(function() {
            var slider = $(this).data('flexslider');
            var count = gurtChatSliderMaxItems();
            slider.vars.minItems = count;
            slider.vars.maxItems = count;
        });
    };

    GurtBot.prototype.addUserNotification = function() {
        $(this.options.gurtOpen).find('.gurt-notification').addClass(this.options.gurtNotificationClass);

        this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Gurt Notification', label: ''});
    };

    GurtBot.prototype.removeGurtNotification = function() {
        $(this.options.gurtOpen).find('.gurt-notification').removeClass(this.options.gurtNotificationClass);
    };

    GurtBot.prototype.clear = function() {
        this.chatHistory.removeItem('gurt-chat');
        $(this.options.chatContainer).html('');
        this.closeGurt();

    };





    var GurtIntroAnimation = function(container, options, finalCallback) {
        this.options = options;
        this.container = container;
        this.finalCallback = finalCallback;
        this.scrollFunction = '';

        this.dataLayer = dataLayer || [];
        this.animationStart = performance.now();

        this.animationTimeout = null;
        this.isDestroyed = false;

        this.init();
    };

    GurtIntroAnimation.prototype.init = function() {
        this.walkingGurt = $("<div></div>", {class: 'walking-gurt'});
        this.chatBubble  = $("<div></div>", {class: 'chat-bubble'}).append($("<div></div>").append($("<div></div>")));
        this.jumpingGurt = $("<div></div>", {class: 'jumping-gurt'});

        this.container.append(this.walkingGurt);
        this.container.append(this.chatBubble);
        this.container.append(this.jumpingGurt);

        $(this.options.gurtMainChat).css('visibility', 'hidden');

        this.walkingGurt.css('top', $(this.options.gurtHeader).outerHeight() + $(this.options.gurtMainChat).outerHeight() - this.walkingGurt.outerHeight() - 20);
        this.walkingGurt.css('left', -this.walkingGurt.outerWidth());

        this.chatBubble.css('top', parseInt(this.walkingGurt.css('top')) - this.chatBubble.outerHeight() - 30);
        this.chatBubble.css('left', viewport().width/2 - this.chatBubble.outerWidth()/2);

        this.jumpingGurt.css('top', $(this.options.gurtHeader).outerHeight() + $(this.options.gurtMainChat).outerHeight() - this.jumpingGurt.outerHeight() - 20);
        this.jumpingGurt.css('left', viewport().width/2 - this.jumpingGurt.outerWidth()/2);

        //preload image
        this.walkingGurt.addClass('standing');
        this.jumpingGurt.addClass('jump');


        var self = this;

        $(document).on('start-animation', function() {

            this.animationTimeout = setTimeout(function() {
                self.walkingGurt.removeClass('standing');
                self.jumpingGurt.removeClass('jump').addClass('after-jump');
                self.startAnimation();

                setTimeout(function() {
                    self.jumpingGurt.removeClass('after-jump');
                }, 500);
            }, 1000);

        });

    };

    GurtIntroAnimation.prototype.destroy = function() {
        this.walkingGurt.remove();
        this.chatBubble.remove();
        this.jumpingGurt.remove();

        this.isDestroyed = true;

        clearTimeout(this.animationTimeout);

        var animationTime = Math.round((performance.now() - this.animationStart)/10 ) / 100 ;
        this.dataLayer.push({event: this.options.dataLayerEvent, action: 'Animation',label: 'Dismiss', value: animationTime});

        $(this.options.gurtMainChat).css('visibility', 'visible').show();
    };

    GurtIntroAnimation.prototype.startAnimation = function() {
        var gurtSpeed = this.options.animation.gurtSpeed;
        if (viewport().width < 768) gurtSpeed = gurtSpeed/2;

        var distance = viewport().width / 2 - this.walkingGurt.outerWidth()/2;

        var self = this;
        this.walkingGurt.animate({left: distance}, distance/gurtSpeed*1000, 'linear', function() {
            if (self.isDestroyed) return;
            self.walkingGurt.addClass('standing');

            self.animationTimeout = setTimeout(function() {
                self.animateBubbleCopy(function() {
                    self.animateJumpingGurt();
                });
            }, 500);

        });
    };

    GurtIntroAnimation.prototype.animateBubbleCopy = function(callback){
        this.chatBubble.fadeIn();

        var self = this;
        var currentBubble = 0;
        var singleAnimation = function(callback) {

            var currentCopy = self.options.animation.bubblecopy[currentBubble];

            self.chatBubble.find('>div>div').html(currentCopy);

            if (currentBubble < self.options.animation.bubblecopy.length-1) {
                self.animationTimeout = setTimeout(function () {
                    currentBubble++;
                    self.chatBubble.find('>div').fadeOut(200, function() {
                        singleAnimation(callback);
                        self.chatBubble.find('>div').fadeIn();
                    });

                }, self.options.animation.bubbleDelays[currentBubble]);
            } else {
                self.animationTimeout = setTimeout(function() {
                    callback();
                }, self.options.animation.bubbleDelays[currentBubble]);
            }
        };

        singleAnimation(function() {
            self.chatBubble.fadeOut(200, callback);
        });

    };

    GurtIntroAnimation.prototype.animateJumpingGurt = function() {
        var self = this;

        this.jumpingGurt.fadeIn(self.options.animation.fadeSpeed, function() {
            self.walkingGurt.hide();
            self.jumpingGurt.addClass('jump');

            self.animationTimeout = setTimeout(function() {
                $(self.options.gurtMainChat).hide().css('visibility', 'visible').fadeIn(self.options.animation.fadeSpeed, function() {

                    self.jumpingGurt.removeClass('jump').addClass('after-jump');

                    var introMessageTemplate = self.options.gurtChatMessageTemplate;

                    introMessageTemplate = introMessageTemplate.replace('{{message}}', self.options.loader);
                    var introMessage = $(introMessageTemplate);
                    introMessage.addClass('gurt-message-loader').css('visibility','hidden');

                    $(self.options.chatContainer).append(introMessage);

                    self.scrollFunction();

                    setTimeout(function() {
                        self.jumpingGurt.animate({
                            top: introMessage.offset().top + (introMessage.outerHeight() - 52)/2,
                            left: introMessage.offset().left,
                            width: 52,
                            height: 52
                        }, function() {
                            if (self.isDestroyed) return;
                            self.animationTimeout = setTimeout(function() {
                                self.jumpingGurt.fadeOut();
                                introMessage.hide().css('visibility','visible').fadeIn();

                                self.animationTimeout = setTimeout(function() {
                                    self.finalCallback();
                                }, 500);

                            }, 400);

                        });
                    }, self.options.animation.shrinkSpeed);


                });
            }, 1500);
        });
    };





    function GurtBotPlugin(option) {
        var dialogflow;

        this.each(function() {
            var data = $(this).data();
            var options = $.extend({}, $.fn.gurt.defaults, typeof option === 'object' && option, data);

            dialogflow = new GurtBot(this, options);
        });

        var resizeFunction = debounce(function() {
            dialogflow.initChatWindow();
            dialogflow.resizeChatSliders();
        }, 50);

        $(window).on('resize', resizeFunction);
    }

    $.fn.gurt = GurtBotPlugin;
    $.fn.gurt.defaults = {
        accessToken: '',
        chatContainer: '#chat-container',
        chatInput: '#chat-input',
        gurtOpen: '.show-gurt',
        gurtClose: '.gurt-close',
        gurtHeader: '.gurt-header',
        gurtBody: '.gurt-body',
        gurtMainChat: '.gurt-main-chat',
        gurtInput: '.gurt-input',
        gurtFooter: '.gurt-footer',
        gurtBtn: '.gurt-btn-send',
        gurtWindowAnimationSpeed: 400,
        contentContextualNotificationDelay: 20*1000,
        smalltalkFollowupDelay: 2000,
        gurtNotificationClass: 'bounce',
        userChatMessageTemplate: '<div class="gurt-msg"><div class="msg"><div class="user-msg">{{message}}</div></div></div>',
        gurtChatMessageTemplate: '<div class="gurt-msg"><div class="gurt-icon"></div><div class="msg"><div class="bot-msg">{{message}}</div></div></div>',
        buttonTemplate: '<button role="button" class="btn btn-primary" data-ai-message="{{aiMessage}}" data-url="{{url}}"><span>{{label}}</span></button> ',
        //slideTemplate: '<li><a href="{{url}}" data-ai-message="{{aiMessage}}"></a><span class="flex-caption">{{label}}</span></li>',
        slideTemplate: '<li><a href="{{url}}" data-ai-message="{{aiMessage}}" data-intent="{{intent}}"><img class="tile" src="{{image_url}}"/><span class="flex-caption">{{label}}</span></a></li>',
        sliderNavigationTemplate: '<div class="flex-nav"><span class="prev"></span><span class="next"></span></div>',
        loader: '<div id="circleG"><div id="circleG_1" class="circleG"></div><div id="circleG_2" class="circleG"></div><div id="circleG_3" class="circleG"></div></div>',
        sliderDefaultOptions: {
            slideshowSpeed:3000,
            animation:'slide',
            controlNav:false,
            directionNav:false,
            pauseOnHover:true,
            direction:'horizontal',
            reverse:false,
            animationSpeed:600,
            prevText:"Previous",
            nextText:"Next",
            easing:"linear",
            slideshow:false,
            minItems:gurtChatSliderMaxItems(),
            maxItems: gurtChatSliderMaxItems(),
            itemMargin: 14,
            itemWidth: 224
        },
        redirectTimeout: 1000,
        contentContextualFollowup: {
            '^/recipes': 'content-followup-recipes',
            '^/products': 'content-followup-products',
            '^/organic' : 'content-followup-organic',
            '^/our-story/history': 'content-followup-organic',
            '^/$': 'after-intro'
        },
        dataLayerEvent: 'gurt-chat-event',
        animation: {
            gurtSpeed: 350,
            bubbleDelays: [2500,3500,2000],
            fadeSpeed: 300,
            shrinkSpeed: 250,
            bubblecopy: [
                "<h4>Yo! I'm Gurt.</h4><p>Welcome to Stonyfield!</p>",
                "<p class='small'>I'm here to help you learn about all things Stonyfield. Check in with me anytime...</p>",
                "<p>I'll be right in here.</p>"
            ],
            gurtIntroMessage: 'Where would you like to go today?'
        },
        gurtRedirectMessage: "Here you go!"
    };

})(jQuery);

function gurtChatSliderMaxItems() {
    if (viewport().width < 480) return 2;
    else return 3;
}
/* JS for Hubspot form dffed640-59a4-46d2-b895-3daa0797be6f (feedback form) */
(function () {
	var form_id = 'dffed640-59a4-46d2-b895-3daa0797be6f'; // v1
	// var form_id = '76087859-84f2-48d7-ae5a-8922f8808e45'; // v2

	var versions = ['', 'v2'];
	var curVersion = '';

	if (location.href.indexOf("feedback") > -1) {
		window["onFormReady_" + form_id.replace(/-/gi, "")] = function () {
			// jQuery(document).ready(function () {
			// 	setTimeout(function () {
			getProductDetails('getProductType', 'product_type', (curVersion !== '') ? '_' + curVersion : curVersion);
			// 	}, 1000);
			// });

			jQuery.each(versions, function (index, version) {
				version = (version !== '') ? '_' + version : version;

				jQuery(document).on('change', '#product_type' + version + '-' + form_id, function () {
					getProductDetails('getProductLine', 'product_line', version);
				});

				jQuery(document).on('change', '#product_line' + version + '-' + form_id, function () {
					getProductDetails('getProductName', 'product_name', version);
				});

				jQuery(document).on('change', '#product_name' + version + '-' + form_id, function () {
					getProductDetails('getProductFlavor', 'product_flavor', version);
				});

				jQuery(document).on('change', '#product_flavor' + version + '-' + form_id, function () {
					getProductDetails('getProductSize', 'product_size', version);
				});
			});
		}
	}

	function getProductDetails(flag, field, version) {
		var jsonUrl = '/wp-content/themes/stonyfield/product_details.php?flag=' + flag;

		var product_type = jQuery('#product_type' + version + '-' + form_id);
		var product_type_value = product_type.val();

		if (product_type_value !== undefined && product_type_value !== '') {
			jsonUrl += '&product_type=' + encodeURIComponent(product_type_value);
		}

		var product_line = jQuery('#product_line' + version + '-' + form_id);
		var product_line_value = product_line.val();

		if (product_line_value !== undefined && product_line_value !== '') {
			jsonUrl += '&product_line=' + encodeURIComponent(product_line_value);
		}

		var product_name = jQuery('#product_name' + version + '-' + form_id);
		var product_name_value = product_name.val();

		if (product_name_value !== undefined && product_name_value !== '') {
			jsonUrl += '&product_name=' + encodeURIComponent(product_name_value);
		}

		var product_flavor = jQuery('#product_flavor' + version + '-' + form_id);
		var product_flavor_value = product_flavor.val();

		if (product_flavor_value !== undefined && product_flavor_value !== '') {
			jsonUrl += '&product_flavor=' + encodeURIComponent(product_flavor_value);
		}

		var product_size = jQuery('#product_size' + version + '-' + form_id);

		jQuery.getJSON(jsonUrl + '&rand=' + Math.random(), 'jsonp', function (data) {
			switch (field) {
				case 'product_line':
					reset_fields([product_name, product_flavor, product_size]);
					break;
				case 'product_name':
					reset_fields([product_flavor, product_size]);
					break;
				case 'product_flavor':
					reset_fields([product_size]);
					break;
				case 'product_type':
					reset_fields([product_line, product_name, product_flavor, product_size]);
					break;
			}

			var field_select = jQuery('#' + field + version + '-' + form_id);

			field_select.children('option').remove();
			field_select.append('<option value="">- Please Select -</option>');

			jQuery.each(data, function (i, value) {
				field_select.append(jQuery('<option>').text(value).attr('value', value));
			});

			field_select.prop('disabled', false);
		});
	}

	function reset_fields(product_inputs) {
		jQuery.each(product_inputs, function (i, product_input) {
			product_input.prop('disabled', true);
			product_input.children('option').remove();
			product_input.append('<option value="">- Please Select -</option>');
		});
	}
})();
(function ($) {

    var ImageLoader = function(element, options) {
        this.elem = $(element);
        this.options = options;
        this.headerCopy = this.elem.find('.page-header-copy');

        this.init();
    };
    ImageLoader.prototype.init = function() {
        this.imageUrl = this.elem.data('image');
        this.width = this.elem.data('width');
        this.height = this.elem.data('height');

        this.setHeight();
        this.loadImage();
    };

    ImageLoader.prototype.setHeight = function() {
        var vw = viewport().width;

        //var new_height = vw/this.width * this.height;
        var new_height = this.elem.height();
        if (this.headerCopy.length > 0) {
            var copy_height = this.headerCopy.outerHeight() + parseInt(this.headerCopy.css('bottom'));

            if (copy_height > new_height) this.elem.css('height', copy_height + this.options.top_padding ) ;
            else this.elem.css('height', null );
        }

    };

    ImageLoader.prototype.loadImage = function() {
        var image = new Image();
        var self = this;
        image.onload = function() {
            self.elem.css('backgroundImage', 'url(' + image.src + ')');
            self.elem.attr('data-image', null);

            if (isNaN(parseInt(self.height))) {
                self.height = this.height;
                self.width = this.width;
                self.setHeight();
            }

            self.elem.addClass('loaded');
        };
        image.src = this.imageUrl;
    };


    function ImageLoaderPlugin(option) {
        var images = [];
        this.each(function() {
            var data = $(this).data();
            var options = $.extend({}, $.fn.imageloader.defaults, typeof option === 'object' && option, data);
            var img = new ImageLoader(this, options);

            images.push(img);
        });

        $(window).on('resize', function() {
            for (var i=0; i < images.length; i++) {
                images[i].setHeight();
            }
        });
    }

    $.fn.imageloader = ImageLoaderPlugin;
    $.fn.imageloader.defaults = {
        top_padding: 40
    };

}(jQuery));
jQuery(function () {
  var loader_img = jQuery('#loader');
  loader_img.hide();

  jQuery('#loadMore').click(function () {
    var data = {
      'action': 'loadmore',
      'query': loadmore_params.posts, // that's how we get params from wp_localize_script() function
      'page': loadmore_params.current_page
    };

    //ajax_load_posts(data);
    animate_post_load(data);
  });

  var session_storage = Cookies.getJSON('recipe-filter');
  if (typeof session_storage !== 'undefined') {
      jQuery('#recipe_foodtypes').val(session_storage.recipe_type);
      jQuery('#recipe_cuisine').val(session_storage.recipe_cuisine);
      jQuery('#recipe_other').val(session_storage.recipe_category);

      var shouldFilter = false;
      if (session_storage.recipe_type !== '') {
          jQuery('.recipe_foodtypes_label').each(function() {
              if (jQuery(this).text().trim() === session_storage.recipe_type) {
                  jQuery(this).addClass('active');
                  shouldFilter = true;
              }
          });

      }

      if (session_storage.recipe_cuisine !== '') {
          jQuery('.recipe_cuisine_label').each(function() {
              if (jQuery(this).text().trim() === session_storage.recipe_cuisine) {
                  jQuery(this).addClass('active');
                  shouldFilter = true;
              }
          });
      }

      if (session_storage.recipe_category !== '') {
          jQuery('.recipe_other_label').each(function() {
              if (jQuery(this).text().trim() === session_storage.recipe_category) {
                  jQuery(this).addClass('active');
                  shouldFilter = true;
              }
          });
      }

      if (shouldFilter) {
          setRecipeFilter();
      }

  }
});

function setRecipeFilter( field, value ) {
    jQuery(loadmore_params.post_container).html('');
    loadmore_params.current_page = 0;

    var session_storage = Cookies.getJSON('recipe-filter');

    if (typeof session_storage === 'undefined') {
        session_storage = {
            'recipe_type': '',
            'recipe_cuisine': '',
            'recipe_category': ''
        };
    }

  if ( field === 'reset' || value === 'reset' ) {
    var fields = [ 'recipe_foodtypes', 'recipe_cuisine', 'recipe_other' ];

    for ( var f = 0; f < fields.length; f++ ) {
      var input_field = fields[ f ];

      jQuery('#' + input_field).val('');
      jQuery('.' + input_field + '_label').removeClass('active');
    }

    session_storage = {
        'recipe_type': '',
        'recipe_cuisine': '',
        'recipe_category': ''
    };
  }
  else {
      if (typeof field !== 'undefined' && typeof value !== 'undefined') {
          var input = jQuery('#' + field);
          input.val(value);
      }
  }

  var query_vars = [];

  var selFoodType = jQuery('#recipe_foodtypes').val();
  if ( selFoodType !== undefined && selFoodType !== '' ) {
    query_vars.push({ 'key': 'food_type', 'value': selFoodType, 'type': 'CHAR', 'compare': '=' });
    session_storage.recipe_type = selFoodType;
  }

  var selCuisineType = jQuery('#recipe_cuisine').val();
  if ( selCuisineType !== undefined && selCuisineType !== '' ) {
    query_vars.push({ 'key': 'cuisine_type', 'value': selCuisineType, 'type': 'CHAR', 'compare': '=' });
    session_storage.recipe_cuisine = selCuisineType;
  }

  var selOther = jQuery('#recipe_other').val();
  if ( selOther !== undefined && selOther !== '' ) {
    query_vars.push({ 'key': 'recipe_category', 'value': selOther, 'type': 'CHAR', 'compare': '=' });
    session_storage.recipe_category = selOther;
  }

  Cookies.set('recipe-filter', session_storage, {path: '/'});

  var loadmore_posts = JSON.parse(loadmore_params.posts);

  if ( query_vars && query_vars.length > 0 ) {
    var meta_query = { 'relation': 'AND' };

    for ( var i = 0; i < query_vars.length; i++ ) {
      meta_query[ i ] = query_vars[ i ];
    }

    loadmore_posts[ 'meta_query' ] = meta_query;
  }
  else {
    loadmore_posts[ 'meta_query' ] = null;
  }

  loadmore_params.posts = JSON.stringify(loadmore_posts);

  var data = {
    'action': 'loadmore',
    'query': loadmore_params.posts, // that's how we get params from wp_localize_script() function
    'page': 0
  };

  animate_post_load(data);
}

function animate_post_load( data, callback ) {
  //save height
  //mark already existing elements
  //load data
  //hide added elements
  //resize container
  //animate show
  //reset height to auto

  var post_container = jQuery(loadmore_params.post_container);
  var container_height = post_container.parent().outerHeight();
  var height = post_container.height();

  post_container.parent().css('height', container_height + "px");
  post_container.find(">div").addClass('visible');

  ajax_load_posts(data, function ( show_load_more ) {
    var added_elements = post_container.find(">div:not(.visible)");
    added_elements.css('opacity', 0);

    post_container.imagesLoaded(function () {
      post_container.find(">div").matchHeight({ remove: true });
      post_container.find(">div").matchHeight();

      var new_height = post_container.height();

      if ( typeof callback !== 'undefined' ) callback();

      added_elements.animate({ opacity: 1 }, 250);
      post_container.find('.visible').removeClass('visible');

      post_container.parent().animate({ height: '+=' + (new_height - height) + "px" }, 250).promise().then(function () {
        post_container.parent().css('height', 'auto');
      });

      if ( show_load_more )
        jQuery('#loadMore').show();
      else
        jQuery('#loadMore').hide();
    });

  });
}

function ajax_load_posts( data, callback ) {
  var loader_img = jQuery('#loader');
  var load_more_btn = jQuery('#loadMore');

  jQuery('#max_page').remove();

  jQuery.ajax({
    url: loadmore_params.ajaxurl, // AJAX handler
    data: data,
    type: 'POST',
    beforeSend: function ( xhr ) {
      load_more_btn.hide();
      loader_img.show();
    },
    success: function ( data ) {
      if ( data ) {
        jQuery(loadmore_params.post_container).append(data);
        loadmore_params.current_page++;
        var should_show_load_more = true;

        if ( jQuery('#max_page') ) {
          loadmore_params.max_page = jQuery('#max_page').val();
        }

        if ( loadmore_params.current_page >= Number(loadmore_params.max_page) ) {
          //load_more_btn.hide(); // if last page, remove the button
          should_show_load_more = false;
        }
        else {
          //load_more_btn.show();
          //should_show_load_more = true;
        }
      }
      else {
        //load_more_btn.hide(); // if no data, remove the button as well
        should_show_load_more = false;
      }

      if ( typeof callback !== 'undefined' ) callback(should_show_load_more);

      loader_img.hide();
    }
  });
}
jQuery(document).ready(function ($) {
    var dataLayer = window.dataLayer || [];
    var slider_event_name = 'slider-event';

    $(document).on('click',".flex-direction-nav a", function(e) {
        var action = 'right arrow click';
        if ($(this).hasClass('flex-prev')) {
            action = 'left arrow click';
        }

        dataLayer.push({
            'event'     : slider_event_name,
            'action'    : action,
            'label'     : getSliderName($(this))
        });
    });

    $(document).on('click', '.flexslider .slides > li > a', function() {
        var targetUrl = $(this).attr('href');
        dataLayer.push({
            'event'     : slider_event_name,
            'action'    : 'slide-click',
            'label'     : getSliderName($(this)) + " - " + targetUrl
        });
    });

    $(document).on('click', '.flexslider .slides > li > .caption-wrap a', function() {
        var targetUrl = $(this).attr('href');
        dataLayer.push({
            'event'     : slider_event_name,
            'action'    : 'slide copy url click',
            'label'     : getSliderName($(this)) + " - " + targetUrl
        });
    });

    $(document).on('click', ".flex-control-nav > li > a", function() {
        dataLayer.push({
            'event'     : slider_event_name,
            'action'    : 'control navigation click',
            'label'     : getSliderName($(this))
        });
    });

    $(document).one('last-slide', function (e, slider) {
        dataLayer.push({
            'event'     : slider_event_name,
            'action'    : 'last slide reached',
            'label'     : getSliderName(slider)
        });
    });

});

function getSliderName(elem) {
    return elem.closest(".flexslider").data('slider-name');
}
function onFormSubmit_e9d94f822a734b019606f8ed22e0f7b3() {
    /**
     * Fired when footer newsletter form is submitted
     */

    _onSiteQ.push(function() {
        window.onespot.onsite.trackCustomAction('submit-newsletter-sign-up');
    });

    pintrk('track', 'signup', {
        lead_type: 'submit-newsletter-sign-up'
    });
}

function onFormSubmit_c87b1d9f324b481fadb51972de17df4d() {
    /**
     * Fired when $2 off coupon form is submitted ( on /yobaby page )
     */

    _onSiteQ.push(function() {
        window.onespot.onsite.trackCustomAction('submit-yobaby-coupon-sign-up');
    });

    pintrk('track', 'signup', {
        lead_type: 'submit-yobaby-coupon-sign-up'
    });
}

function onFormSubmit_dc851567f2c6467c869e1dd8f6ad2d80() {
    /**
     * Fired when 6 Month Birthday sweepstakes form is submitted
     */

    _onSiteQ.push(function() {
        window.onespot.onsite.trackCustomAction('submit-6mobday-sweeps-sign-up');
    });

    pintrk('track', 'signup', {
        lead_type: 'submit-6mobday-sweeps-sign-up'
    });
}

function onFormSubmit_75ed30116eb84900903837bec5b6d16c() {
    /**
     * Fired when Cooking with Kids sweepstakes form is submitted
     */

    _onSiteQ.push(function() {
        window.onespot.onsite.trackCustomAction('submit-cwk-sweeps-sign-up');
    });

    pintrk('track', 'signup', {
        lead_type: 'submit-cwk-sweeps-sign-up'
    });
}

function onFormSubmit_8360d9b8f44a476fb666ff9a5b46d660() {
    /**
     * Fired when coupon form is submitted ( on /coupon page )
     */

    _onSiteQ.push(function() {
        window.onespot.onsite.trackCustomAction('submit-coupon-sign-up');
    });

    pintrk('track', 'signup', {
        lead_type: 'submit-coupon-sign-up'
    });
}

function onFormSubmit_31b394cb87714356bc391588eeb181b6() {
    /**
     * Fired when $1.50 quart coupon form is submitted
     */

    _onSiteQ.push(function() {
        window.onespot.onsite.trackCustomAction('submit-quart-coupon-sign-up');
    });

    pintrk('track', 'signup', {
        lead_type: 'submit-quart-coupon-sign-up'
    });
}

(function ($) {

    var ProductFilter = function(element,options) {
        this.elem = $(element);
        this.options = options;

        this.categoryFilter = [];
        this.page = 1;

        this.init();
    };

    ProductFilter.prototype.init = function () {
        var self = this;
        //this.api = new wp.api.collections.Product();

        //var source   = document.getElementById(this.options.product_list_template).innerHTML;
        //this.template = Handlebars.compile(source);

        // $.each(this.options.subcategories, function(key, category) {
        //     self.categoryFilter.push(parseInt(key));
        //
        //     $.each(category, function(subkey, subcategory) {
        //         self.categoryFilter.push(subcategory.term_id);
        //         $.each(subcategory.subcategories, function(subsubkey, subsubcategory) {
        //             self.categoryFilter.push(subsubcategory.term_id);
        //         });
        //     });
        // });

        //console.log('all categories: ' , this.categoryFilter);

        $(this.elem).find('a').on('click', function(e) {
            e.preventDefault();

            var previousCategory = self.selectedCategoryId;
            self.selectedCategoryId = $(this).data('categoryId');
            var categoryUrl = $(this).attr('href');

            $(self.elem).find('.active').removeClass('active');
            $(this).addClass('active');

            if ($(self.options.subcategories_container).children().length === 0 || previousCategory === self.selectedCategoryId) {
                self.onCategoryClick(self.options.subcategories[self.selectedCategoryId], categoryUrl);
            } else {

                $(self.options.subcategories_container).parent().collapse('hide');
                $(self.options.subcategories_container).parent().one('hidden.bs.collapse', function () {
                    self.onCategoryClick(self.options.subcategories[self.selectedCategoryId], categoryUrl);
                });

            }

        });

        // $(this.options.load_more_btn).on('click', function(e) {
        //     e.preventDefault();
        //
        //     //self.page++;
        //     self.getProductsForCategoryList(null, function() {
        //         $(self.options.product_list_container).imagesLoaded(function() {
        //             $(self.options.product_list_container).find(">div").matchHeight({remove: true});
        //             $(self.options.product_list_container).find(">div").matchHeight();
        //         });
        //     });
        //
        // });
    };

    ProductFilter.prototype.resetFilter = function() {
        this.categoryFilter = [];
        loadmore_params.current_page = 0;
        //this.page = 1;
        //$(this.options.load_more_btn).show();
    };

    ProductFilter.prototype.onCategoryClick = function(subcategories, categoryUrl) {
        var self = this;

        $(this.options.subcategories_container).html('');
        this.resetFilter();

        if (subcategories.length > 0) {

            for (var i = 0; i < subcategories.length; i++) {
                var subcat = subcategories[i];
                var markup = this.options.subcategory_markup
                    .replace('{{url}}', categoryUrl+'/'+subcat['slug'])
                    .replace('{{id}}', subcat['term_id'])
                    .replace('{{name}}', subcat['name']);

                $(this.options.subcategories_container).append(markup);

                this.categoryFilter.push(parseInt(subcat['term_id']));

                for (var j=0; j < subcat.subcategories.length; j++) {
                    this.categoryFilter.push(subcat.subcategories[j].term_id);
                }
            }

            //this.getProductsForCategoryList();
            this.animateTransition();

            $(this.options.subcategories_container).parent().collapse('show');

            $(this.options.subcategories_container).find('a').on('click', function(e) {
                e.preventDefault();
                var subcategoryId = $(this).data('categoryId');

                $(self.options.subcategories_container).find('.active').removeClass('active');
                $(this).closest('.panel').addClass('active');

                self.onSubcategoryClick(subcategoryId);
            });
        } else {
            this.categoryFilter = [this.selectedCategoryId];
            //this.getProductsForCategoryList();
            this.animateTransition();
        }
    };

    ProductFilter.prototype.onSubcategoryClick = function(subcategoryId) {
        var self = this;
        var subcategoryList =  this.options.subcategories[this.selectedCategoryId];
        var selectedCategory = [];

        this.resetFilter();

        for (var i=0; i<subcategoryList.length; i++) {
            if (subcategoryList[i].term_id === subcategoryId) {

                selectedCategory = subcategoryList[i];

                if (subcategoryList[i].subcategories.length === 0) {
                    this.categoryFilter.push(subcategoryList[i].term_id);
                } else {
                    for (var j=0; j<subcategoryList[i].subcategories.length; j++) {
                        this.categoryFilter.push(subcategoryList[i].subcategories[j].term_id);
                    }
                }


            }
        }

        //this.getProductsForCategoryList(selectedCategory);
        this.animateTransition(selectedCategory);
    };


    ProductFilter.prototype.prepareQuery = function() {
        var tax_query = [{
            taxonomy: 'product_categories',
            terms: this.categoryFilter,
            'operator': 'IN'
        }];

        var loadmore_posts = JSON.parse(loadmore_params.posts);
        loadmore_posts['tax_query'] = tax_query;
        loadmore_params.posts = JSON.stringify(loadmore_posts);

        return data = {
            'action': 'loadmore',
            'query': loadmore_params.posts,
            'page': 0
        };
    };


    ProductFilter.prototype.getProductsForCategoryList = function(selectedCategory, callback) {
        var self = this;

        ajax_load_posts(this.prepareQuery(), function(show_load_more) {

            $(self.options.product_list_container).find('.loader').remove();

            if (!show_load_more) {
                $(self.options.load_more_btn).hide();
            }

            if (typeof callback !== 'undefined') callback();
        });

        // var self = this;
        // var productFetch = this.api.fetch({
        //     data:{
        //         product_categories:self.categoryFilter,
        //         per_page: self.options.per_page,
        //         page: self.page
        //     }
        // });
        //
        //
        //
        // productFetch.done(function(resp) {
        //     //console.log(resp);
        //
        //     var products = self.convertProductResponse(resp, selectedCategory);
        //
        //     var html = self.template(products);
        //     $(self.options.product_list_container).find('.loader').remove();
        //     $(self.options.product_list_container).append(html);
        //
        //     if(!self.api.hasMore()) {
        //         $(self.options.load_more_btn).hide();
        //     }
        //
        //     if (typeof callback !== 'undefined') callback();
        // });


    };


    ProductFilter.prototype.animateTransition = function(selectedCategory) {
        var self = this;
        $('.load-more-blog-entries').hide();
        $(this.options.product_list_container).parent().css('height', $(this.options.product_list_container).parent().height());
        $(this.options.product_list_container).find('.product-list-item').animate({opacity: 0}, this.options.transition_speed).promise().then(function() {
            $(self.options.product_list_container).find('.product-list-item').parent().remove();

            $(self.options.product_list_container).html('<span class="loader"></span>');

            animate_post_load(self.prepareQuery(), function() {
                $(self.options.product_list_container).find('.loader').remove();
                $('.load-more-blog-entries').show();
            });
        });


        // var self = this;
        // $(self.options.product_list_container).find('.product-list-item').animate({opacity: 0}, self.options.transition_speed).promise().then(function() {
        //     $(self.options.product_list_container).parent().css('height', $(self.options.product_list_container).parent().height());
        //
        //         $(self.options.product_list_container).html('<span class="loader"></span>');
        //
        //         self.getProductsForCategoryList(selectedCategory, function() {
        //             $(self.options.product_list_container).find('.product-list-item').css('opacity', 0).imagesLoaded(function() {
        //                 $(self.options.product_list_container).find(">div").matchHeight({remove: true});
        //                 $(self.options.product_list_container).find(">div").matchHeight();
        //
        //                 var padding = parseInt($(self.options.product_list_container).parent().css('paddingTop'));
        //                 var new_height = $(self.options.product_list_container).outerHeight();
        //
        //                 $(self.options.product_list_container).parent().animate({height: new_height+2*padding+ "px"}, self.options.transition_speed).promise().then(function() {
        //                     $(self.options.product_list_container).find('.product-list-item').animate({opacity: 1}, self.options.transition_speed);
        //                     $(self.options.product_list_container).parent().css('height', 'auto');
        //                 });
        //             });
        //
        //         });
        //
        // });
    };


    ProductFilter.prototype.convertProductResponse = function(resp, selectedCategory) {
        var products = [];

        for (var i=0; i < resp.length; i++) {

            var added = false;
            for (var j=0; j < products.length;j++) {
                if (products[j].category_id === resp[i].product_categories[0]) {
                    var product = {
                        id: resp[i].id,
                        name: resp[i].product_title,
                        slug: resp[i].slug,
                        link: resp[i].link,
                        thumbnail: resp[i].product_thumbnail
                    };
                    products[j].products.push(product);
                    added = true;
                    break;
                }


            }

            if (!added) {
                products.push({
                    category_id: resp[i].product_categories[0],
                    products: [
                        {
                            id: resp[i].id,
                            name: this.formatName(resp[i].title.rendered),
                            slug: resp[i].slug,
                            link: resp[i].link,
                            thumbnail: resp[i].product_thumbnail
                        }
                    ]
                });
            }


        }

        if (typeof selectedCategory !== 'undefined' && selectedCategory !== null) {
            for (i = 0; i < selectedCategory.subcategories.length; i++) {
                for (j = 0; j < products.length; j++) {
                    if (selectedCategory.subcategories[i].term_id === products[j].category_id) {
                        products[j].category_name = this.formatName(selectedCategory.subcategories[i].name);
                        break;
                    }
                }

            }
        }

        //console.log('selected category:', selectedCategory);

        return products;
    };

    ProductFilter.prototype.formatName = function(name) {
        return $('<textarea />').html(name).val();
    };



    function ProductFilterPlugin(option) {
        this.each(function() {
            var data = $(this).data();
            var options = $.extend({}, $.fn.productfilter.defaults, typeof option === 'object' && option, data);
            var filter = new ProductFilter(this, options);
        });
    }

    $.fn.productfilter = ProductFilterPlugin;
    $.fn.productfilter.defaults = {
        ajax_endpoint: '/wp-json/wp/v2/',
        subcategories_container: '#subcategories-container',
        product_list_template: 'product-list-template',
        product_list_container: '#postList',
        load_more_btn: '#load-more',
        subcategory_markup: '<div class="panel"><a href="{{url}}" data-category-id="{{id}}">{{name}}</a></div>',
        subcategories: [],
        per_page: 12,
        transition_speed: 250
    };

}(jQuery));

function viewport() {
	var e = window, a = 'inner';

	if (!('innerWidth' in window)) {
		a = 'client';
		e = document.documentElement || document.body;
	}

	return { width: e[a + 'Width'], height: e[a + 'Height'] };
}

function productSliderMaxItems() {
	if (viewport().width < 480) {
		return 1;
	}

	if (viewport().width < 992) {
		return 2;
	}

	return 4;
}

jQuery(document).ready(function ($) {
	$(".page-header-image").imagesLoaded(function () {
		$(".page-header-image").imageloader();
	});

	/*
		$('.grid').imagesLoaded(function(
				$('.grid').masonry({
						// options
						itemSelector: '.grid-item',
						columnWidth: '.grid-sizer',
						percentPosition: true
				});
});
*/

	$('.cloud').cloud();

	$(".load-more-feed").on('click', function (e) {
		e.preventDefault();

		$("#sbi_load .sbi_load_btn").click();
	});

	$('.product-slider-left').click(function () {
		$('.product-slider .flex-prev').click()
	});
	$('.product-slider-right').click(function () {
		$('.product-slider .flex-next').click()
	});

	$(window).resize(function () {
		var ele = $('#navbar-collapse-2');
		if (ele.outerWidth() > 339) {
			ele.removeClass('in');
		}
	});

	$('.show-more-btn').each(function () {
		$(this).closest('.panel-grid').addClass('show-more-section');

		$(this).on('click', function (e) {
			e.preventDefault();
			$(this).closest('.panel-grid').find('.so-panel').show().animate({ opacity: 1 });
			$(this).remove();
		});
	});

	$('.print').on('click', function () {
		window.print();
	});

  $(".gurt-chatbot").gurt({
	  accessToken: 'dafd441b99a54e6aa6cec078baff2c94'
  });
});