var com_adswizz_synchro_register_VERSION = '2.0.13.21';
var com_adswizz_synchro_debug = false;

if (typeof com_adswizz_synchro_listenerid === 'undefined') {
    var com_adswizz_synchro_listenerid; // exposes listenerID as a global variable
}

if (typeof com_adswizz_synchro_listnerid === 'undefined') {
    var com_adswizz_synchro_listnerid = com_adswizz_synchro_listenerid;
}

function internal_com_adswizz_synchro_decorateUrl(url, useCompanion) {
    var adChar;
    var obj = window['com_adswizz_synchro_tags'] || {};
    var _url = url.replace('http://', '');

    if (useCompanion) {
        obj.companionAds = true;
    }


    if (_url.indexOf("/") === -1) {
        adChar = '/;?';
    } else if (_url.lastIndexOf("/") === _url.length - 1) {
        adChar = ';?';
    } else if (_url.indexOf("?") !== -1) {
        adChar = '&';
    } else {
        adChar = '?';
    }

    url += adChar + 'listenerid=' + com_adswizz_synchro_getListenerId();

    if (com_adswizz_synchro_getTags(obj) !== '') {
        var first = true;
        var awParamValue = '';

        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                awParamValue += (!first ? ';' : '') + k + ":" + obj[k];
                first = false;
            }
        }

        url += '&awparams=' + encodeURIComponent(awParamValue);
    }

    return url;
}

function com_adswizz_synchro_decorateUrl(url) {
    return internal_com_adswizz_synchro_decorateUrl(url, true)
}

function com_adswizz_synchro_decoratePlaylistUrl(url) {
    return internal_com_adswizz_synchro_decorateUrl(url, false)
}

function com_adswizz_synchro_decoratePlaylists(name) {
    if (name.length = 0) return;

    var links = document.getElementsByName(name);

    for (var i = 0; i < links.length; i++) {
        var anchor = links.item(i);
        try {
            anchor.href = com_adswizz_synchro_decoratePlaylistUrl(anchor.href);
        } catch (e) {
        }
    }
}

function com_adswizz_synchro_readCookie(name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

function com_adswizz_synchro_getCookie() {
    // this is the adswizz cookie on the client domain, used in the URL decoration
    var cookie = com_adswizz_synchro_readCookie('adswizz_oaid');

    if (cookie !== undefined && cookie !== '') {
        com_adswizz_synchro_listenerid = new Date().getTime() + "_" + Math.random();
        document.cookie = 'adswizz_oaid=' + com_adswizz_synchro_listenerid;
    } else {
        com_adswizz_synchro_listenerid = cookie;
    }

    return com_adswizz_synchro_listenerid;
}

/**
 * For backwards compatibility reasons. Use #com_adswizz_synchro_getListenerId() instead.
 */
function com_adswizz_synchro_getListnerId() {
    return com_adswizz_synchro_getListenerId();
}

/**
 * Get the Adswizz ListenerID.
 */
function com_adswizz_synchro_getListenerId() {
    if (com_adswizz_synchro_listenerid !== undefined && com_adswizz_synchro_listenerid !== '') {
        return com_adswizz_synchro_listenerid;
    }

    return com_adswizz_synchro_getCookie();
}

function com_adswizz_synchro_getTags(obj) {
    var returnString = '';
    var separator = '';

    for (var k in obj) {
        if (obj.hasOwnProperty(k)) {
            returnString += separator + k + "=" + obj[k];
            separator = "&";
        }
    }

    return encodeURIComponent(returnString);
}

function com_adswizz_synchro_write_iframeAd(obj) {
    var iframeCode = "<iframe name='adswizz_synchro_iframe" + Math.random() + "' width='" + obj.width + "' height='" + obj.height +
        "' src='//synchrobox.adswizz.com/synchroIframe.php?debug=" + com_adswizz_synchro_debug +
        "&fallbackUrl=" + obj.fallbackUrl +
        "&tags=" + com_adswizz_synchro_getTags(this["com_adswizz_synchro_tags"]) +
        "&server=" + obj.server + "&listenerId=" + com_adswizz_synchro_getListenerId() +
        "&refreshInterval=" + obj.refreshInterval +
        "&refreshRepeat=" + obj.refreshRepeat +
        "&cb=" + Math.random() +
        "&prerollZone=" + obj.prerollZone +
        "&midrollZone=" + obj.midrollZone +
        "&fallbackZone=" + obj.fallbackZone +
        "&autoplay=" + obj.autoplay +
        "&width=" + obj.width +
        "&height=" + obj.height +
        ((typeof com_adswizz_synchro_isjava != 'undefined' && com_adswizz_synchro_isjava == true) ? "&java=true" : "") +
        "' framespacing='0' frameborder='0'  allowtransparency='true' frameborder='yes' scrolling='no'></iframe>";
    document.write(iframeCode);
}

/**
 * Injects an i-frame which connects to our synchroscript delivery engine.
 */
function com_adswizz_synchro_sync_iframe() {
    var awIframe;
    var $body = document.body;

    if ($body) {
        awIframe = document.createElement('iframe');
        awIframe.style.display = 'none';
        awIframe.width = '0px';
        awIframe.height = '0px';
        awIframe.src = '//synchroscript.deliveryengine.adswizz.com/www/delivery/afr.php?zoneid=9';

        $body.appendChild(awIframe);
    }
}


/**
 * @description
 * Utility fn. Waits for DOM to be ready and then calls the arg fn
 * @param fn
 * @private
 */
(function _domContentLoaded(fn) {
    // check if document is already loaded
    if (document.readyState === 'complete') {
        setTimeout(_callback, 0);
    } else {
        if (typeof document.addEventListener === 'function') {
            // works for modern browsers and >=IE9
            document.addEventListener('DOMContentLoaded', _callback);
        } else {
            // fallback for  IE <= 8
            document.attachEvent('onreadystatechange', function onReadyStateChangeHandler() {
                if (document.readyState === 'interactive') {
                    document.detachEvent('onreadystatechange', onReadyStateChangeHandler);
                    _callback();
                }
            });
        }

        // Fallback to window load event for older browsers
        // *For new browsers load event will be called last (callback was already executed) will not have any impact
        addWindowLoadEvent(_callback);
    }

    //Make sure that the provided fn is called only once
    function _callback() {
        if (!_callback.wasCalled) {
            _callback.wasCalled = true;
            fn();
        }
    }

    //Make sure to not remove any existing fn
    function addWindowLoadEvent(fn) {
        var oldonload = window.onload;
        if (typeof window.onload !== 'function') {
            window.onload = fn;
        } else {
            window.onload = function() {
                if (oldonload) {
                    oldonload();
                }
                fn();
            }
        }
    }

//Insert the iframe after DOM is ready
}(com_adswizz_synchro_sync_iframe));
